{"version":3,"file":"withAndroidNotifications.js","names":["Colors","AndroidConfig","addMetaDataItemToMainApplication","getMainApplicationOrThrow","removeMetaDataItemFromMainApplication","Manifest","BASELINE_PIXEL_SIZE","META_DATA_NOTIFICATION_ICON","META_DATA_NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON","NOTIFICATION_ICON_RESOURCE","NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON_COLOR_RESOURCE","withNotificationIcons","config","withDangerousMod","setNotificationIconAsync","modRequest","projectRoot","withNotificationIconColor","withAndroidColors","modResults","setNotificationIconColor","withNotificationManifest","withAndroidManifest","setNotificationConfig","getNotificationIcon","notification","icon","getNotificationColor","color","writeNotificationIconImageFilesAsync","removeNotificationIconImageFilesAsync","manifest","mainApplication","colors","assignColorValue","name","value","Promise","all","Object","values","dpiValues","map","folderName","scale","drawableFolderName","replace","dpiFolderPath","path","resolve","ANDROID_RES_PATH","fs","ensureDir","iconSizePx","resizedIcon","generateImageAsync","cacheType","src","width","height","resizeMode","backgroundColor","source","writeFile","e","Error","remove"],"sources":["../../../../src/plugins/unversioned/expo-notifications/withAndroidNotifications.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withAndroidManifest,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ANDROID_RES_PATH, dpiValues } from '../../icons/withAndroidIcons';\n\nconst { Colors } = AndroidConfig;\nconst {\n  addMetaDataItemToMainApplication,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} = AndroidConfig.Manifest;\n\ntype AndroidManifest = AndroidConfig.Manifest.AndroidManifest;\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = (config) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setNotificationIconColor(config, config.modResults);\n    return config;\n  });\n};\n\nexport const withNotificationManifest: ConfigPlugin = (config) => {\n  return withAndroidManifest(config, (config) => {\n    config.modResults = setNotificationConfig(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport function setNotificationConfig(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport function setNotificationIconColor(\n  config: ExpoConfig,\n  colors: AndroidConfig.Resources.ResourceXML\n) {\n  return Colors.assignColorValue(colors, {\n    name: NOTIFICATION_ICON_COLOR,\n    value: getNotificationColor(config),\n  });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"],"mappings":"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"}