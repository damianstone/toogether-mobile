{"version":3,"sources":["../../../src/plugins/unversioned/createLegacyPlugin.ts"],"names":["toCamelCase","s","replace","x","toUpperCase","isModuleExcluded","config","packageName","_internal","autolinkedModules","includes","createLegacyPlugin","fallback","withFallback","Array","isArray","withUnknown","_isLegacyPlugin","plugin","methodName","Object","defineProperty","value"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AASA,MAAMA,WAAW,GAAIC,CAAD,IAAeA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiBC,CAAC,IAAIA,CAAC,CAACC,WAAF,GAAgB,CAAhB,CAAtB,CAAnC;;AAEA,SAASC,gBAAT,CAA0BC,MAA1B,EAAiEC,WAAjE,EAA+F;AAAA;;AAC7F;AACA;AACA,SACE,sBAAAD,MAAM,CAACE,SAAP,wEAAkBC,iBAAlB,KAAuC,CAACH,MAAM,CAACE,SAAP,CAAiBC,iBAAjB,CAAmCC,QAAnC,CAA4CH,WAA5C,CAD1C;AAGD;;AAEM,SAASI,kBAAT,CAA4B;AACjCJ,EAAAA,WADiC;AAEjCK,EAAAA;AAFiC,CAA5B,EAMU;AACf,MAAIC,YAAJ;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3BC,IAAAA,YAAY,GAAGP,MAAM,IAAI,kCAAYA,MAAZ,EAAoBM,QAApB,CAAzB;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAGD,QAAf;AACD;;AAED,QAAMI,WAAyB,GAAGV,MAAM,IAAI;AAC1C;AACA;AACA,QAAID,gBAAgB,CAACC,MAAD,EAASC,WAAT,CAApB,EAA2C;AACzC,aAAO,0CAAoBM,YAApB,EAAkCN,WAAlC,EAA+CD,MAA/C,CAAP;AACD;;AAED,WAAO,uCAAiBA,MAAjB,EAAyB;AAC9BW,MAAAA,eAAe,EAAE,IADa;AAE9BC,MAAAA,MAAM,EAAEX,WAFsB;AAG9B;AACAK,MAAAA,QAAQ,EAAE,0CAAoBC,YAApB,EAAkCN,WAAlC;AAJoB,KAAzB,CAAP;AAMD,GAbD;;AAeA,QAAMY,UAAU,GAAGnB,WAAW,CAAE,QAAOO,WAAY,EAArB,CAA9B;AACAa,EAAAA,MAAM,CAACC,cAAP,CAAsBL,WAAtB,EAAmC,MAAnC,EAA2C;AACzCM,IAAAA,KAAK,EAAEH;AADkC,GAA3C;AAIA,SAAOH,WAAP;AACD","sourcesContent":["import {\n  ConfigPlugin,\n  createRunOncePlugin,\n  PluginParameters,\n  withPlugins,\n  withStaticPlugin,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nconst toCamelCase = (s: string) => s.replace(/-./g, x => x.toUpperCase()[1]);\n\nfunction isModuleExcluded(config: Pick<ExpoConfig, '_internal'>, packageName: string): boolean {\n  // Skip using the versioned plugin when autolinking is enabled\n  // and doesn't link the native module.\n  return (\n    config._internal?.autolinkedModules && !config._internal.autolinkedModules.includes(packageName)\n  );\n}\n\nexport function createLegacyPlugin({\n  packageName,\n  fallback,\n}: {\n  packageName: string;\n  fallback: ConfigPlugin | PluginParameters<typeof withPlugins>;\n}): ConfigPlugin {\n  let withFallback: ConfigPlugin;\n\n  if (Array.isArray(fallback)) {\n    withFallback = config => withPlugins(config, fallback);\n  } else {\n    withFallback = fallback;\n  }\n\n  const withUnknown: ConfigPlugin = config => {\n    // Skip using the versioned plugin when autolinking is enabled\n    // and doesn't link the native module.\n    if (isModuleExcluded(config, packageName)) {\n      return createRunOncePlugin(withFallback, packageName)(config);\n    }\n\n    return withStaticPlugin(config, {\n      _isLegacyPlugin: true,\n      plugin: packageName,\n      // If the static plugin isn't found, use the unversioned one.\n      fallback: createRunOncePlugin(withFallback, packageName),\n    });\n  };\n\n  const methodName = toCamelCase(`with-${packageName}`);\n  Object.defineProperty(withUnknown, 'name', {\n    value: methodName,\n  });\n\n  return withUnknown;\n}\n"],"file":"createLegacyPlugin.js"}