{"version":3,"file":"withIosSplashAssets.js","names":["debug","Debug","IMAGE_CACHE_NAME","IMAGESET_PATH","BACKGROUND_IMAGESET_PATH","PNG_FILENAME","DARK_PNG_FILENAME","TABLET_PNG_FILENAME","DARK_TABLET_PNG_FILENAME","withIosSplashAssets","config","splash","withDangerousMod","iosNamedProjectRoot","IOSConfig","Paths","getSourceRoot","modRequest","projectRoot","createSplashScreenBackgroundImageAsync","configureImageAssets","image","darkImage","dark","tabletImage","darkTabletImage","imageSetPath","path","resolve","fs","remove","writeContentsJsonFileAsync","assetPath","copyImageFiles","createPngFileAsync","color","filePath","png","Jimp","writeAsync","createBackgroundImagesAsync","darkColor","tabletColor","darkTabletColor","generateImagesAssetsAsync","generateImageAsset","item","fileName","anyItem","darkItem","tabletItem","darkTabletItem","source","generateImageAsync","cacheType","src","writeFile","items","filter","Promise","all","map","backgroundColor","tabletBackgroundColor","imagesetPath","join","ensureDir","darkAppearances","appearance","value","buildContentsJsonImages","createContentsJsonItem","idiom","filename","scale","appearances","undefined","Boolean","images","writeContentsJsonAsync"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withIosSplashAssets.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, withDangerousMod } from '@expo/config-plugins';\nimport { generateImageAsync } from '@expo/image-utils';\nimport Debug from 'debug';\nimport fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport * as path from 'path';\n\nimport {\n  ContentsJsonImage,\n  ContentsJsonImageAppearance,\n  createContentsJsonItem,\n  writeContentsJsonAsync,\n} from '../../icons/AssetContents';\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:assets');\n\nconst IMAGE_CACHE_NAME = 'splash-ios';\nconst IMAGESET_PATH = 'Images.xcassets/SplashScreen.imageset';\nconst BACKGROUND_IMAGESET_PATH = 'Images.xcassets/SplashScreenBackground.imageset';\nconst PNG_FILENAME = 'image.png';\nconst DARK_PNG_FILENAME = 'dark_image.png';\nconst TABLET_PNG_FILENAME = 'tablet_image.png';\nconst DARK_TABLET_PNG_FILENAME = 'dark_tablet_image.png';\n\nexport const withIosSplashAssets: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  if (!splash) {\n    return config;\n  }\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const iosNamedProjectRoot = IOSConfig.Paths.getSourceRoot(config.modRequest.projectRoot);\n\n      await createSplashScreenBackgroundImageAsync({\n        iosNamedProjectRoot,\n        splash,\n      });\n\n      await configureImageAssets({\n        projectRoot: config.modRequest.projectRoot,\n        iosNamedProjectRoot,\n        image: splash.image,\n        darkImage: splash.dark?.image,\n        tabletImage: splash.tabletImage,\n        darkTabletImage: splash.dark?.tabletImage,\n      });\n\n      return config;\n    },\n  ]);\n};\n\n/**\n * Creates imageset containing image for Splash/Launch Screen.\n */\nasync function configureImageAssets({\n  projectRoot,\n  iosNamedProjectRoot,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectRoot: string;\n  iosNamedProjectRoot: string;\n  image?: string | null;\n  darkImage?: string | null;\n  tabletImage: string | null;\n  darkTabletImage?: string | null;\n}) {\n  const imageSetPath = path.resolve(iosNamedProjectRoot, IMAGESET_PATH);\n\n  // ensure old SplashScreen imageSet is removed\n  await fs.remove(imageSetPath);\n\n  if (!image) {\n    return;\n  }\n\n  await writeContentsJsonFileAsync({\n    assetPath: imageSetPath,\n    image: PNG_FILENAME,\n    darkImage: darkImage ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletImage ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletImage ? DARK_TABLET_PNG_FILENAME : null,\n  });\n\n  await copyImageFiles({\n    projectRoot,\n    iosNamedProjectRoot,\n    image,\n    darkImage,\n    tabletImage,\n    darkTabletImage,\n  });\n}\n\nasync function createPngFileAsync(color: string, filePath: string) {\n  const png = new Jimp(1, 1, color);\n  return png.writeAsync(filePath);\n}\n\nasync function createBackgroundImagesAsync({\n  iosNamedProjectRoot,\n  color,\n  darkColor,\n  tabletColor,\n  darkTabletColor,\n}: {\n  iosNamedProjectRoot: string;\n  color: string;\n  darkColor: string | null;\n  tabletColor: string | null;\n  darkTabletColor: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      await createPngFileAsync(\n        item,\n        path.resolve(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH, fileName)\n      );\n    },\n    anyItem: color,\n    darkItem: darkColor,\n    tabletItem: tabletColor,\n    darkTabletItem: darkTabletColor,\n  });\n}\n\nasync function copyImageFiles({\n  projectRoot,\n  iosNamedProjectRoot,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectRoot: string;\n  iosNamedProjectRoot: string;\n  image: string;\n  darkImage?: string | null;\n  tabletImage?: string | null;\n  darkTabletImage?: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      // Using this method will cache the images in `.expo` based on the properties used to generate them.\n      // this method also supports remote URLs and using the global sharp instance.\n      const { source } = await generateImageAsync({ projectRoot, cacheType: IMAGE_CACHE_NAME }, {\n        src: item,\n      } as any);\n      // Write image buffer to the file system.\n      // const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n      await fs.writeFile(path.resolve(iosNamedProjectRoot, IMAGESET_PATH, fileName), source);\n    },\n    anyItem: image,\n    darkItem: darkImage,\n    tabletItem: tabletImage,\n    darkTabletItem: darkTabletImage,\n  });\n}\n\nasync function generateImagesAssetsAsync({\n  generateImageAsset,\n  anyItem,\n  darkItem,\n  tabletItem,\n  darkTabletItem,\n}: {\n  generateImageAsset: (item: string, fileName: string) => Promise<void>;\n  anyItem: string;\n  darkItem?: string | null;\n  tabletItem?: string | null;\n  darkTabletItem?: string | null;\n}) {\n  const items = [\n    [anyItem, PNG_FILENAME],\n    [darkItem, DARK_PNG_FILENAME],\n    [tabletItem, TABLET_PNG_FILENAME],\n    [darkTabletItem, DARK_TABLET_PNG_FILENAME],\n  ].filter(([item]) => !!item) as unknown as [string, string];\n\n  await Promise.all(items.map(([item, fileName]) => generateImageAsset(item, fileName)));\n}\n\nasync function createSplashScreenBackgroundImageAsync({\n  iosNamedProjectRoot,\n  splash,\n}: {\n  // Something like projectRoot/ios/MyApp/\n  iosNamedProjectRoot: string;\n  splash: IOSSplashConfig;\n}) {\n  const color = splash.backgroundColor;\n  const darkColor = splash.dark?.backgroundColor;\n  const tabletColor = splash.tabletBackgroundColor;\n  const darkTabletColor = splash.dark?.tabletBackgroundColor;\n\n  const imagesetPath = path.join(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH);\n  // Ensure the Images.xcassets/... path exists\n  await fs.remove(imagesetPath);\n  await fs.ensureDir(imagesetPath);\n\n  await createBackgroundImagesAsync({\n    iosNamedProjectRoot,\n    color,\n    darkColor: darkColor ? darkColor : null,\n    tabletColor: tabletColor ? tabletColor : null,\n    darkTabletColor: darkTabletColor ? darkTabletColor : null,\n  });\n\n  await writeContentsJsonFileAsync({\n    assetPath: path.resolve(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH),\n    image: PNG_FILENAME,\n    darkImage: darkColor ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletColor ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletColor ? DARK_TABLET_PNG_FILENAME : null,\n  });\n}\n\nconst darkAppearances: ContentsJsonImageAppearance[] = [\n  {\n    appearance: 'luminosity',\n    value: 'dark',\n  } as ContentsJsonImageAppearance,\n];\n\nexport function buildContentsJsonImages({\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  image: string;\n  tabletImage: string | null;\n  darkImage: string | null;\n  darkTabletImage: string | null;\n}): ContentsJsonImage[] {\n  return [\n    // Phone light\n    createContentsJsonItem({\n      idiom: 'universal',\n      filename: image,\n      scale: '1x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '2x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '3x',\n    }),\n    // Phone dark\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        filename: darkImage,\n        scale: '1x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '3x',\n      }),\n    // Tablet light\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        filename: tabletImage,\n        scale: '1x',\n      }),\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        scale: '2x',\n      }),\n    // Phone dark\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        filename: darkTabletImage ?? undefined,\n        scale: '1x',\n      }),\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n  ].filter(Boolean) as ContentsJsonImage[];\n}\n\nasync function writeContentsJsonFileAsync({\n  assetPath,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  assetPath: string;\n  image: string;\n  darkImage: string | null;\n  tabletImage: string | null;\n  darkTabletImage: string | null;\n}) {\n  const images = buildContentsJsonImages({ image, darkImage, tabletImage, darkTabletImage });\n\n  debug(`create contents.json:`, assetPath);\n  debug(`use images:`, images);\n  await writeContentsJsonAsync(assetPath, { images });\n}\n"],"mappings":"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"}