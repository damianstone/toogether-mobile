{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/InterfaceBuilder.ts"],"names":["createConstraint","firstItem","firstAttribute","secondItem","secondAttribute","$","id","createConstraintId","attributes","crypto","createHash","update","join","digest","applyImageToSplashScreenXML","xml","imageName","contentMode","imageId","containerId","width","height","imageView","userLabel","image","horizontalHuggingPriority","verticalHuggingPriority","clipsSubviews","userInteractionEnabled","translatesAutoresizingMaskIntoConstraints","rect","key","x","y","document","scenes","scene","objects","viewController","view","subviews","push","constraints","constraint","resources","name","createTemplateSplashScreenAsync","contents","Parser","parseStringPromise","toString","builder","Builder","preserveChildrenOrder","xmldec","version","encoding","renderOpts","pretty","indent","buildObject"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAzEE;AA0EA,SAAO,MAAM,KAAIC,gBAAJ,IAAaC,kBAAb,CAAgCF,QAAhC,CAAb;AACD,C,CAED;;;AACO,SAASG,QAAT,CAAkBnC,GAAlB,EAAoC;AACzC,QAAMoC,OAAO,GAAG,KAAIC,iBAAJ,EAAY;AAC1BC,IAAAA,qBAAqB,EAAE,IADG;AAE1BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAFkB;AAM1BC,IAAAA,UAAU,EAAE;AACVC,MAAAA,MAAM,EAAE,IADE;AAEVC,MAAAA,MAAM,EAAE;AAFE;AANc,GAAZ,CAAhB;AAWA,SAAOR,OAAO,CAACS,WAAR,CAAoB7C,GAApB,CAAP;AACD","sourcesContent":["import crypto from 'crypto';\nimport { Builder, Parser } from 'xml2js';\n\nexport type IBBoolean = 'YES' | 'NO' | boolean;\n\nexport type IBItem<\n  H extends Record<string, any>,\n  B extends Record<string, any[]> = { [key: string]: any }\n> = {\n  $: H;\n} & B;\n\nexport type Rect = {\n  key: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type IBRect = IBItem<Rect>;\n\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\n\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\n\nexport type IBImageView = IBItem<\n  {\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: string | 'scaleAspectFill';\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    rect: IBRect[];\n  }\n>;\n\nexport type IBConstraint = IBItem<{\n  firstItem: string;\n  firstAttribute: ConstraintAttribute;\n  secondItem: string;\n  secondAttribute: ConstraintAttribute;\n  id: string;\n}>;\n\nexport type IBViewController = IBItem<\n  {\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n  },\n  {\n    view: IBItem<\n      {\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n      },\n      {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n          key: string;\n          flexibleMaxX: IBBoolean;\n          flexibleMaxY: IBBoolean;\n        }>[];\n\n        subviews: IBItem<\n          object,\n          {\n            imageView: IBImageView[];\n          }\n        >[];\n        color: IBItem<{\n          key: string | 'backgroundColor';\n          systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<\n          object,\n          {\n            constraint: IBConstraint[];\n          }\n        >[];\n        viewLayoutGuide: IBItem<{\n          id: string;\n          key: string | 'safeArea';\n        }>[];\n      }\n    >[];\n  }\n>;\n\nexport type IBPoint = IBItem<{\n  key: string | 'canvasLocation';\n  x: number;\n  y: number;\n}>;\n\nexport type IBScene = IBItem<\n  { sceneID: string },\n  {\n    objects: {\n      viewController: IBViewController[];\n      placeholder: IBItem<{\n        id: string;\n        placeholderIdentifier?: string;\n        userLabel: string;\n        sceneMemberID: string;\n      }>[];\n    }[];\n    point: IBPoint[];\n  }\n>;\n\ntype IBResourceImage = IBItem<{\n  name: string;\n  width: number;\n  height: number;\n}>;\n\ntype IBDevice = IBItem<{\n  id: string;\n  orientation: string | 'portrait';\n  appearance: string | 'light';\n}>;\n\nexport type IBSplashScreenDocument = {\n  document: IBItem<\n    {\n      type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n      version: '3.0' | string;\n      toolsVersion: number;\n      targetRuntime: 'iOS.CocoaTouch' | string;\n      propertyAccessControl: 'none' | string;\n      useAutolayout: IBBoolean;\n      launchScreen: IBBoolean;\n      useTraitCollections: IBBoolean;\n      useSafeAreas: IBBoolean;\n      colorMatched: IBBoolean;\n      initialViewController: string;\n    },\n    {\n      device: IBDevice[];\n      dependencies: unknown[];\n      scenes: {\n        scene: IBScene[];\n      }[];\n      resources: {\n        image: IBResourceImage[];\n      }[];\n    }\n  >;\n};\n\nfunction createConstraint(\n  [firstItem, firstAttribute]: [string, ConstraintAttribute],\n  [secondItem, secondAttribute]: [string, ConstraintAttribute]\n): IBConstraint {\n  return {\n    $: {\n      firstItem,\n      firstAttribute,\n      secondItem,\n      secondAttribute,\n      // Prevent updating between runs\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute),\n    },\n  };\n}\n\nfunction createConstraintId(...attributes: string[]) {\n  return crypto.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\n\nexport function applyImageToSplashScreenXML(\n  xml: IBSplashScreenDocument,\n  {\n    imageName,\n    contentMode,\n  }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n  }\n): IBSplashScreenDocument {\n  const imageId = 'EXPO-SplashScreen';\n  const containerId = 'EXPO-ContainerView';\n  const width = 414;\n  const height = 736;\n\n  const imageView: IBImageView = {\n    $: {\n      id: imageId,\n      userLabel: imageName,\n      image: imageName,\n      contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false,\n    },\n    rect: [\n      {\n        $: {\n          key: 'frame',\n          x: 0.0,\n          y: 0.0,\n          width,\n          height,\n        },\n      },\n    ],\n  };\n\n  // Add ImageView\n  xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0].subviews[0].imageView.push(\n    imageView\n  );\n\n  // Add Constraints\n  xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0].constraints[0].constraint.push(\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    createConstraint([imageId, 'top'], [containerId, 'top']),\n    createConstraint([imageId, 'leading'], [containerId, 'leading']),\n    createConstraint([imageId, 'trailing'], [containerId, 'trailing']),\n    createConstraint([imageId, 'bottom'], [containerId, 'bottom'])\n  );\n\n  // Add resource\n  xml.document.resources[0].image.push({\n    // <image name=\"SplashScreen\" width=\"414\" height=\"736\"/>\n    $: {\n      name: imageName,\n      width,\n      height,\n    },\n  });\n\n  return xml;\n}\n\nexport async function createTemplateSplashScreenAsync(): Promise<IBSplashScreenDocument> {\n  const contents = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <document\n      type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\"\n      version=\"3.0\"\n      toolsVersion=\"16096\"\n      targetRuntime=\"iOS.CocoaTouch\"\n      propertyAccessControl=\"none\"\n      useAutolayout=\"YES\"\n      launchScreen=\"YES\"\n      useTraitCollections=\"YES\"\n      useSafeAreas=\"YES\"\n      colorMatched=\"YES\"\n      initialViewController=\"EXPO-VIEWCONTROLLER-1\"\n    >\n      <device id=\"retina5_5\" orientation=\"portrait\" appearance=\"light\"/>\n      <dependencies>\n        <deployment identifier=\"iOS\"/>\n        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"16087\"/>\n        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>\n        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n      </dependencies>\n      <scenes>\n        <!--View Controller-->\n        <scene sceneID=\"EXPO-SCENE-1\">\n          <objects>\n            <viewController\n              storyboardIdentifier=\"SplashScreenViewController\"\n              id=\"EXPO-VIEWCONTROLLER-1\"\n              sceneMemberID=\"viewController\"\n            >\n              <view\n                key=\"view\"\n                userInteractionEnabled=\"NO\"\n                contentMode=\"scaleToFill\"\n                insetsLayoutMarginsFromSafeArea=\"NO\"\n                id=\"EXPO-ContainerView\"\n                userLabel=\"ContainerView\"\n              >\n                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"736\"/>\n                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>\n                <subviews>\n                  <imageView\n                    userInteractionEnabled=\"NO\"\n                    contentMode=\"scaleAspectFill\"\n                    horizontalHuggingPriority=\"251\"\n                    verticalHuggingPriority=\"251\"\n                    insetsLayoutMarginsFromSafeArea=\"NO\"\n                    image=\"SplashScreenBackground\"\n                    translatesAutoresizingMaskIntoConstraints=\"NO\"\n                    id=\"EXPO-SplashScreenBackground\"\n                    userLabel=\"SplashScreenBackground\"\n                  >\n                    <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"736\"/>\n                  </imageView>\n                </subviews>\n                <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"/>\n                <constraints>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"1gX-mQ-vu6\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"leading\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"leading\" id=\"6tX-OG-Sck\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"trailing\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"trailing\" id=\"ABX-8g-7v4\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"bottom\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"bottom\" id=\"jkI-2V-eW5\"/>\n                </constraints>\n                <viewLayoutGuide key=\"safeArea\" id=\"Rmq-lb-GrQ\"/>\n              </view>\n            </viewController>\n            <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"EXPO-PLACEHOLDER-1\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n          </objects>\n          <point key=\"canvasLocation\" x=\"140.625\" y=\"129.4921875\"/>\n        </scene>\n      </scenes>\n      <resources>\n        <image name=\"SplashScreenBackground\" width=\"1\" height=\"1\"/>\n      </resources>\n    </document>`;\n  return await new Parser().parseStringPromise(contents);\n}\n\n// Attempt to copy Xcode formatting.\nexport function toString(xml: any): string {\n  const builder = new Builder({\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8',\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    ',\n    },\n  });\n  return builder.buildObject(xml);\n}\n"],"file":"InterfaceBuilder.js"}