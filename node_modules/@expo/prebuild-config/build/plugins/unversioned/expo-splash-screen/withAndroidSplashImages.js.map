{"version":3,"file":"withAndroidSplashImages.js","names":["IMAGE_CACHE_NAME","SPLASH_SCREEN_FILENAME","DRAWABLES_CONFIGS","default","modes","light","path","dark","dimensionsMultiplier","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","withAndroidSplashImages","config","withDangerousMod","setSplashImageDrawablesAsync","modRequest","projectRoot","clearAllExistingSplashImagesAsync","splash","getAndroidSplashConfig","darkSplash","getAndroidDarkSplashConfig","Promise","all","setSplashImageDrawablesForThemeAsync","androidMainPath","join","Object","values","map","filePath","fs","pathExists","resolve","remove","theme","imageKey","image","source","generateImageAsync","cacheType","src","outputPath","folder","dirname","ensureDir","writeFile"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashImages.ts"],"sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst IMAGE_CACHE_NAME = 'splash-android';\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setSplashImageDrawablesAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  projectRoot: string\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config);\n  const darkSplash = getAndroidDarkSplashConfig(config);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string\n) {\n  if (!config) return;\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].map(async (imageKey) => {\n      // @ts-ignore\n      const image = config[imageKey];\n      if (image) {\n        // Using this method will cache the images in `.expo` based on the properties used to generate them.\n        // this method also supports remote URLs and using the global sharp instance.\n        const { source } = await generateImageAsync({ projectRoot, cacheType: IMAGE_CACHE_NAME }, {\n          src: image,\n        } as any);\n\n        // Get output path for drawable.\n        const outputPath = path.join(\n          androidMainPath,\n          // @ts-ignore\n          DRAWABLES_CONFIGS[imageKey].modes[theme].path\n        );\n        // Ensure directory exists.\n        const folder = path.dirname(outputPath);\n        await fs.ensureDir(folder);\n        // Write image buffer to the file system.\n        await fs.writeFile(outputPath, source);\n      }\n      return null;\n    })\n  );\n}\n"],"mappings":"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"}