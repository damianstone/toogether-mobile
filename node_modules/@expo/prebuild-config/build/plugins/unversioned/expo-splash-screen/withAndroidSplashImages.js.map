{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashImages.ts"],"names":["IMAGE_CACHE_NAME","SPLASH_SCREEN_FILENAME","DRAWABLES_CONFIGS","default","modes","light","path","dark","dimensionsMultiplier","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","withAndroidSplashImages","config","setSplashImageDrawablesAsync","modRequest","projectRoot","clearAllExistingSplashImagesAsync","splash","darkSplash","Promise","all","setSplashImageDrawablesForThemeAsync","androidMainPath","join","Object","values","map","filePath","fs","pathExists","resolve","remove","theme","imageKey","image","source","cacheType","src","outputPath","folder","dirname","ensureDir","writeFile"],"mappings":"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","sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst IMAGE_CACHE_NAME = 'splash-android';\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setSplashImageDrawablesAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  projectRoot: string\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config);\n  const darkSplash = getAndroidDarkSplashConfig(config);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string\n) {\n  if (!config) return;\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].map(async imageKey => {\n      // @ts-ignore\n      const image = config[imageKey];\n      if (image) {\n        // Using this method will cache the images in `.expo` based on the properties used to generate them.\n        // this method also supports remote URLs and using the global sharp instance.\n        const { source } = await generateImageAsync({ projectRoot, cacheType: IMAGE_CACHE_NAME }, {\n          src: image,\n        } as any);\n\n        // Get output path for drawable.\n        const outputPath = path.join(\n          androidMainPath,\n          // @ts-ignore\n          DRAWABLES_CONFIGS[imageKey].modes[theme].path\n        );\n        // Ensure directory exists.\n        const folder = path.dirname(outputPath);\n        await fs.ensureDir(folder);\n        // Write image buffer to the file system.\n        await fs.writeFile(outputPath, source);\n      }\n      return null;\n    })\n  );\n}\n"],"file":"withAndroidSplashImages.js"}