{"version":3,"sources":["../../../src/plugins/icons/withAndroidIcons.ts"],"names":["Colors","AndroidConfig","dpiValues","mdpi","folderName","scale","hdpi","xhdpi","xxhdpi","xxxhdpi","BASELINE_PIXEL_SIZE","ANDROID_RES_PATH","MIPMAP_ANYDPI_V26","ICON_BACKGROUND","IC_LAUNCHER_PNG","IC_LAUNCHER_ROUND_PNG","IC_LAUNCHER_BACKGROUND_PNG","IC_LAUNCHER_FOREGROUND_PNG","IC_LAUNCHER_XML","IC_LAUNCHER_ROUND_XML","withAndroidIcons","config","foregroundImage","backgroundColor","backgroundImage","getAdaptiveIcon","icon","getIcon","withAndroidAdaptiveIconColors","setIconAsync","modRequest","projectRoot","isAdaptive","android","adaptiveIcon","modResults","setBackgroundColor","configureLegacyIconAsync","configureAdaptiveIconAsync","Promise","all","Object","values","map","dpiFolderPath","path","resolve","iconSizePx","squareIconImage","cacheType","src","width","height","resizeMode","source","roundIconImage","borderRadius","squareBackgroundLayer","roundBackgroundLayer","foreground","background","fs","ensureDir","writeFile","adpativeIconForeground","adpativeIconBackground","removeBackgroundImageFilesAsync","e","Error","icLauncherXmlString","createAdaptiveIconXmlString","createAdaptiveIconXmlFiles","colors","assignColorValue","value","name","add","anyDpiV26Directory","launcherPath","launcherRoundPath","existsSync","remove"],"mappings":"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","sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ResourceXML } from '@expo/config-plugins/build/android/Resources';\nimport { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nconst { Colors } = AndroidConfig;\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 48;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withAndroidIcons: ConfigPlugin = config => {\n  const { foregroundImage, backgroundColor, backgroundImage } = getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return config;\n  }\n\n  // Apply colors.xml changes\n  config = withAndroidAdaptiveIconColors(config, backgroundColor);\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setIconAsync(config.modRequest.projectRoot, {\n        icon,\n        backgroundColor,\n        backgroundImage,\n        isAdaptive: !!config.android?.adaptiveIcon,\n      });\n      return config;\n    },\n  ]);\n};\n\nconst withAndroidAdaptiveIconColors: ConfigPlugin<string | null> = (config, backgroundColor) => {\n  return withAndroidColors(config, config => {\n    config.modResults = setBackgroundColor(backgroundColor ?? '#FFFFFF', config.modResults);\n    return config;\n  });\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.android?.icon || config.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    isAdaptive,\n  }: {\n    icon: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    isAdaptive: boolean;\n  }\n) {\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n\n  await configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, isAdaptive);\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      // backgroundImage overrides backgroundColor\n      backgroundColor = backgroundImage ? 'transparent' : backgroundColor ?? 'transparent';\n\n      let squareIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-square' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n          }\n        )\n      ).source;\n      let roundIconImage: Buffer = (\n        await generateImageAsync(\n          { projectRoot, cacheType: 'android-standard-circle' },\n          {\n            src: icon,\n            width: iconSizePx,\n            height: iconSizePx,\n            resizeMode: 'cover',\n            backgroundColor,\n            borderRadius: iconSizePx / 2,\n          }\n        )\n      ).source;\n\n      if (backgroundImage) {\n        // Layer the buffers we just created on top of the background image that's provided\n        const squareBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-square-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        const roundBackgroundLayer = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-standard-round-background' },\n            {\n              src: backgroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n              borderRadius: iconSizePx / 2,\n            }\n          )\n        ).source;\n        squareIconImage = await compositeImagesAsync({\n          foreground: squareIconImage,\n          background: squareBackgroundLayer,\n        });\n        roundIconImage = await compositeImagesAsync({\n          foreground: roundIconImage,\n          background: roundBackgroundLayer,\n        });\n      }\n\n      await fs.ensureDir(dpiFolderPath);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_PNG), squareIconImage);\n      await fs.writeFile(path.resolve(dpiFolderPath, IC_LAUNCHER_ROUND_PNG), roundIconImage);\n    })\n  );\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  isAdaptive: boolean\n) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const adpativeIconForeground = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-adaptive-foreground' },\n            {\n              src: foregroundImage,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(\n          path.resolve(dpiFolderPath, IC_LAUNCHER_FOREGROUND_PNG),\n          adpativeIconForeground\n        );\n\n        if (backgroundImage) {\n          const adpativeIconBackground = (\n            await generateImageAsync(\n              { projectRoot, cacheType: 'android-adaptive-background' },\n              {\n                src: backgroundImage,\n                width: iconSizePx,\n                height: iconSizePx,\n                resizeMode: 'cover',\n                backgroundColor: 'transparent',\n              }\n            )\n          ).source;\n          await fs.writeFile(\n            path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG),\n            adpativeIconBackground\n          );\n        } else {\n          // Remove any instances of ic_launcher_background.png that are there from previous icons\n          await removeBackgroundImageFilesAsync(projectRoot);\n        }\n      } catch (e) {\n        throw new Error('Encountered an issue resizing adaptive app icon: ' + e);\n      }\n    })\n  );\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage);\n  await createAdaptiveIconXmlFiles(\n    projectRoot,\n    icLauncherXmlString,\n    // If the user only defined icon and not android.adaptiveIcon, then skip enabling the layering system\n    // this will scale the image down and present it uncropped.\n    isAdaptive\n  );\n}\n\nfunction setBackgroundColor(backgroundColor: string | null, colors: ResourceXML) {\n  return Colors.assignColorValue(colors, {\n    value: backgroundColor,\n    name: ICON_BACKGROUND,\n  });\n}\n\nexport const createAdaptiveIconXmlString = (backgroundImage: string | null) => {\n  let background = `<background android:drawable=\"@color/iconBackground\"/>`;\n  if (backgroundImage) {\n    background = `<background android:drawable=\"@mipmap/ic_launcher_background\"/>`;\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ${background}\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(\n  projectRoot: string,\n  icLauncherXmlString: string,\n  add: boolean\n) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  const launcherPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML);\n  const launcherRoundPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML);\n  if (add) {\n    await fs.writeFile(launcherPath, icLauncherXmlString);\n    await fs.writeFile(launcherRoundPath, icLauncherXmlString);\n  } else {\n    // Remove the xml if the icon switches from adaptive to standard.\n    await Promise.all(\n      [launcherPath, launcherRoundPath].map(async path => {\n        if (fs.existsSync(path)) {\n          return await fs.remove(path);\n        }\n      })\n    );\n  }\n}\n\nasync function removeBackgroundImageFilesAsync(projectRoot: string) {\n  return await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, folderName);\n      await fs.remove(path.resolve(dpiFolderPath, IC_LAUNCHER_BACKGROUND_PNG));\n    })\n  );\n}\n"],"file":"withAndroidIcons.js"}