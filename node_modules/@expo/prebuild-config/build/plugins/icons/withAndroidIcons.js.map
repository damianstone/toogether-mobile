{"version":3,"file":"withAndroidIcons.js","names":["Colors","AndroidConfig","dpiValues","mdpi","folderName","scale","hdpi","xhdpi","xxhdpi","xxxhdpi","BASELINE_PIXEL_SIZE","ANDROID_RES_PATH","MIPMAP_ANYDPI_V26","ICON_BACKGROUND","IC_LAUNCHER_PNG","IC_LAUNCHER_ROUND_PNG","IC_LAUNCHER_BACKGROUND_PNG","IC_LAUNCHER_FOREGROUND_PNG","IC_LAUNCHER_XML","IC_LAUNCHER_ROUND_XML","withAndroidIcons","config","foregroundImage","backgroundColor","backgroundImage","getAdaptiveIcon","icon","getIcon","withAndroidManifestIcons","withAndroidAdaptiveIconColors","withDangerousMod","setIconAsync","modRequest","projectRoot","isAdaptive","android","adaptiveIcon","setRoundIconManifest","manifest","application","Manifest","getMainApplicationOrThrow","$","withAndroidColors","modResults","setBackgroundColor","configureLegacyIconAsync","generateRoundIconAsync","deleteIconNamedAsync","configureAdaptiveIconAsync","generateMultiLayerImageAsync","outputImageFileName","imageCacheFolder","backgroundImageCacheFolder","borderRadiusRatio","backgroundImageFileName","icLauncherXmlString","createAdaptiveIconXmlString","createAdaptiveIconXmlFiles","colors","assignColorValue","value","name","background","add","anyDpiV26Directory","path","resolve","fs","ensureDir","launcherPath","launcherRoundPath","Promise","all","writeFile","map","existsSync","remove","iterateDpiValues","dpiFolder","iconLayer","generateIconAsync","cacheType","src","backgroundLayer","compositeImagesAsync","foreground","callback","Object","values","iconSizePx","generateImageAsync","width","height","resizeMode","borderRadius","undefined","source"],"sources":["../../../src/plugins/icons/withAndroidIcons.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ResourceXML } from '@expo/config-plugins/build/android/Resources';\nimport { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { withAndroidManifestIcons } from './withAndroidManifestIcons';\n\nconst { Colors } = AndroidConfig;\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 48;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withAndroidIcons: ConfigPlugin = (config) => {\n  const { foregroundImage, backgroundColor, backgroundImage } = getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return config;\n  }\n\n  config = withAndroidManifestIcons(config);\n  // Apply colors.xml changes\n  config = withAndroidAdaptiveIconColors(config, backgroundColor);\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setIconAsync(config.modRequest.projectRoot, {\n        icon,\n        backgroundColor,\n        backgroundImage,\n        isAdaptive: !!config.android?.adaptiveIcon,\n      });\n      return config;\n    },\n  ]);\n};\n\nexport function setRoundIconManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  manifest: AndroidConfig.Manifest.AndroidManifest\n): AndroidConfig.Manifest.AndroidManifest {\n  const isAdaptive = !!config.android?.adaptiveIcon;\n  const application = AndroidConfig.Manifest.getMainApplicationOrThrow(manifest);\n\n  if (isAdaptive) {\n    application.$['android:roundIcon'] = '@mipmap/ic_launcher_round';\n  } else {\n    delete application.$['android:roundIcon'];\n  }\n  return manifest;\n}\n\nconst withAndroidAdaptiveIconColors: ConfigPlugin<string | null> = (config, backgroundColor) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setBackgroundColor(backgroundColor ?? '#FFFFFF', config.modResults);\n    return config;\n  });\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.android?.icon || config.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    isAdaptive,\n  }: {\n    icon: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    isAdaptive: boolean;\n  }\n) {\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  if (isAdaptive) {\n    await generateRoundIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  } else {\n    await deleteIconNamedAsync(projectRoot, IC_LAUNCHER_ROUND_PNG);\n  }\n  await configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, isAdaptive);\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    backgroundImage,\n    backgroundColor,\n    outputImageFileName: IC_LAUNCHER_PNG,\n    imageCacheFolder: 'android-standard-square',\n    backgroundImageCacheFolder: 'android-standard-square-background',\n  });\n}\n\nasync function generateRoundIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    borderRadiusRatio: 0.5,\n    outputImageFileName: IC_LAUNCHER_ROUND_PNG,\n    backgroundImage,\n    backgroundColor,\n    imageCacheFolder: 'android-standard-circle',\n    backgroundImageCacheFolder: 'android-standard-round-background',\n  });\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  isAdaptive: boolean\n) {\n  await generateMultiLayerImageAsync(projectRoot, {\n    backgroundColor: 'transparent',\n    backgroundImage,\n    backgroundImageCacheFolder: 'android-adaptive-background',\n    outputImageFileName: IC_LAUNCHER_FOREGROUND_PNG,\n    icon: foregroundImage,\n    imageCacheFolder: 'android-adaptive-foreground',\n    backgroundImageFileName: IC_LAUNCHER_BACKGROUND_PNG,\n  });\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage);\n  await createAdaptiveIconXmlFiles(\n    projectRoot,\n    icLauncherXmlString,\n    // If the user only defined icon and not android.adaptiveIcon, then skip enabling the layering system\n    // this will scale the image down and present it uncropped.\n    isAdaptive\n  );\n}\n\nfunction setBackgroundColor(backgroundColor: string | null, colors: ResourceXML) {\n  return Colors.assignColorValue(colors, {\n    value: backgroundColor,\n    name: ICON_BACKGROUND,\n  });\n}\n\nexport const createAdaptiveIconXmlString = (backgroundImage: string | null) => {\n  const background = backgroundImage ? `@mipmap/ic_launcher_background` : `@color/iconBackground`;\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <background android:drawable=\"${background}\"/>\n    <foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(\n  projectRoot: string,\n  icLauncherXmlString: string,\n  add: boolean\n) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  const launcherPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML);\n  const launcherRoundPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML);\n  if (add) {\n    await Promise.all([\n      fs.writeFile(launcherPath, icLauncherXmlString),\n      fs.writeFile(launcherRoundPath, icLauncherXmlString),\n    ]);\n  } else {\n    // Remove the xml if the icon switches from adaptive to standard.\n    await Promise.all(\n      [launcherPath, launcherRoundPath].map(async (path) => {\n        if (fs.existsSync(path)) {\n          return fs.remove(path);\n        }\n      })\n    );\n  }\n}\n\nasync function generateMultiLayerImageAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    imageCacheFolder,\n    backgroundImageCacheFolder,\n    borderRadiusRatio,\n    outputImageFileName,\n    backgroundImageFileName,\n  }: {\n    icon: string;\n    backgroundImage: string | null;\n    backgroundColor: string | null;\n    imageCacheFolder: string;\n    backgroundImageCacheFolder: string;\n    backgroundImageFileName?: string;\n    borderRadiusRatio?: number;\n    outputImageFileName: string;\n  }\n) {\n  await iterateDpiValues(projectRoot, async ({ dpiFolder, scale }) => {\n    let iconLayer = await generateIconAsync(projectRoot, {\n      cacheType: imageCacheFolder,\n      src: icon,\n      scale,\n      // backgroundImage overrides backgroundColor\n      backgroundColor: backgroundImage ? 'transparent' : backgroundColor ?? 'transparent',\n      borderRadiusRatio,\n    });\n\n    if (backgroundImage) {\n      const backgroundLayer = await generateIconAsync(projectRoot, {\n        cacheType: backgroundImageCacheFolder,\n        src: backgroundImage,\n        scale,\n        backgroundColor: 'transparent',\n        borderRadiusRatio,\n      });\n\n      if (backgroundImageFileName) {\n        await fs.writeFile(path.resolve(dpiFolder, backgroundImageFileName), backgroundLayer);\n      } else {\n        iconLayer = await compositeImagesAsync({\n          foreground: iconLayer,\n          background: backgroundLayer,\n        });\n      }\n    } else if (backgroundImageFileName) {\n      // Remove any instances of ic_launcher_background.png that are there from previous icons\n      await deleteIconNamedAsync(projectRoot, backgroundImageFileName);\n    }\n\n    await fs.ensureDir(dpiFolder);\n    await fs.writeFile(path.resolve(dpiFolder, outputImageFileName), iconLayer);\n  });\n}\n\nfunction iterateDpiValues(\n  projectRoot: string,\n  callback: (value: { dpiFolder: string; folderName: string; scale: number }) => Promise<void>\n) {\n  return Promise.all(\n    Object.values(dpiValues).map((value) =>\n      callback({\n        dpiFolder: path.resolve(projectRoot, ANDROID_RES_PATH, value.folderName),\n        ...value,\n      })\n    )\n  );\n}\n\nasync function deleteIconNamedAsync(projectRoot: string, name: string) {\n  return iterateDpiValues(projectRoot, ({ dpiFolder }) => {\n    return fs.remove(path.resolve(dpiFolder, name));\n  });\n}\n\nasync function generateIconAsync(\n  projectRoot: string,\n  {\n    cacheType,\n    src,\n    scale,\n    backgroundColor,\n    borderRadiusRatio,\n  }: {\n    cacheType: string;\n    src: string;\n    scale: number;\n    backgroundColor: string;\n    borderRadiusRatio?: number;\n  }\n) {\n  const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n  return (\n    await generateImageAsync(\n      { projectRoot, cacheType },\n      {\n        src,\n        width: iconSizePx,\n        height: iconSizePx,\n        resizeMode: 'cover',\n        backgroundColor,\n        borderRadius: borderRadiusRatio ? iconSizePx * borderRadiusRatio : undefined,\n      }\n    )\n  ).source;\n}\n"],"mappings":"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"}