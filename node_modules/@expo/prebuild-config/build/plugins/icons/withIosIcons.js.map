{"version":3,"sources":["../../../src/plugins/icons/withIosIcons.ts"],"names":["getProjectName","IOSConfig","XcodeUtils","withIosIcons","config","setIconsAsync","modRequest","projectRoot","IMAGE_CACHE_NAME","IMAGESET_PATH","ICON_CONTENTS","idiom","sizes","size","scales","getIcons","ios","icon","WarningAggregator","addWarningIOS","iosNamedProjectRoot","getIosNamedProjectPath","fs","ensureDir","imagesJson","generatedIcons","platform","isMarketing","scale","filename","getAppleIconName","iconSizePx","source","cacheType","src","name","width","height","removeTransparency","resizeMode","backgroundColor","assetPath","writeFile","push","images","projectName"],"mappings":"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","sourcesContent":["import { ConfigPlugin, IOSConfig, WarningAggregator, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ContentsJson, ContentsJsonImageIdiom, writeContentsJsonAsync } from './AssetContents';\n\nconst { getProjectName } = IOSConfig.XcodeUtils;\n\nexport const withIosIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\n// Hard-coding seemed like the clearest and safest way to implement the sizes.\nexport const ICON_CONTENTS: {\n  idiom: ContentsJsonImageIdiom;\n  sizes: { size: number; scales: (1 | 2 | 3)[] }[];\n}[] = [\n  {\n    idiom: 'iphone',\n    sizes: [\n      {\n        size: 20,\n        scales: [2, 3],\n      },\n      {\n        size: 29,\n        scales: [1, 2, 3],\n      },\n      {\n        size: 40,\n        scales: [2, 3],\n      },\n      {\n        size: 60,\n        scales: [2, 3],\n      },\n      // TODO: 76x76@2x seems unused now\n      // {\n      //   size: 76,\n      //   scales: [2],\n      // },\n    ],\n  },\n  {\n    idiom: 'ipad',\n    sizes: [\n      {\n        size: 20,\n        scales: [1, 2],\n      },\n      {\n        size: 29,\n        scales: [1, 2],\n      },\n      {\n        size: 40,\n        scales: [1, 2],\n      },\n      {\n        size: 76,\n        scales: [1, 2],\n      },\n      {\n        size: 83.5,\n        scales: [2],\n      },\n    ],\n  },\n  {\n    idiom: 'ios-marketing',\n    sizes: [\n      {\n        size: 1024,\n        scales: [1],\n      },\n    ],\n  },\n];\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = [];\n\n  // keep track of icons that have been generated so we can reuse them in the Contents.json\n  const generatedIcons: Record<string, boolean> = {};\n\n  for (const platform of ICON_CONTENTS) {\n    const isMarketing = platform.idiom === 'ios-marketing';\n    for (const { size, scales } of platform.sizes) {\n      for (const scale of scales) {\n        // The marketing icon is special because it makes no sense.\n        const filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n        // Only create an image that hasn't already been generated.\n        if (!(filename in generatedIcons)) {\n          const iconSizePx = size * scale;\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: icon,\n              name: filename,\n              width: iconSizePx,\n              height: iconSizePx,\n              removeTransparency: true,\n              // The icon should be square, but if it's not then it will be cropped.\n              resizeMode: 'cover',\n              // Force the background color to solid white to prevent any transparency.\n              // TODO: Maybe use a more adaptive option based on the icon color?\n              backgroundColor: '#ffffff',\n            }\n          );\n          // Write image buffer to the file system.\n          const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          await fs.writeFile(assetPath, source);\n          // Save a reference to the generated image so we don't create a duplicate.\n          generatedIcons[filename] = true;\n        }\n        imagesJson.push({\n          idiom: platform.idiom,\n          size: `${size}x${size}`,\n          // @ts-ignore: template types not supported in TS yet\n          scale: `${scale}x`,\n          filename,\n        });\n      }\n    }\n  }\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n"],"file":"withIosIcons.js"}