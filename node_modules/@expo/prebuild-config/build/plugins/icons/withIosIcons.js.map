{"version":3,"file":"withIosIcons.js","names":["getProjectName","IOSConfig","XcodeUtils","withIosIcons","config","withDangerousMod","setIconsAsync","modRequest","projectRoot","IMAGE_CACHE_NAME","IMAGESET_PATH","ICON_CONTENTS","idiom","sizes","size","scales","getIcons","ios","icon","WarningAggregator","addWarningIOS","iosNamedProjectRoot","getIosNamedProjectPath","fs","ensureDir","join","imagesJson","generatedIcons","platform","isMarketing","scale","filename","getAppleIconName","iconSizePx","source","generateImageAsync","cacheType","src","name","width","height","removeTransparency","resizeMode","backgroundColor","assetPath","writeFile","push","writeContentsJsonAsync","images","projectName"],"sources":["../../../src/plugins/icons/withIosIcons.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, WarningAggregator, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ContentsJson, ContentsJsonImageIdiom, writeContentsJsonAsync } from './AssetContents';\n\nconst { getProjectName } = IOSConfig.XcodeUtils;\n\nexport const withIosIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\n// Hard-coding seemed like the clearest and safest way to implement the sizes.\nexport const ICON_CONTENTS: {\n  idiom: ContentsJsonImageIdiom;\n  sizes: { size: number; scales: (1 | 2 | 3)[] }[];\n}[] = [\n  {\n    idiom: 'iphone',\n    sizes: [\n      {\n        size: 20,\n        scales: [2, 3],\n      },\n      {\n        size: 29,\n        scales: [1, 2, 3],\n      },\n      {\n        size: 40,\n        scales: [2, 3],\n      },\n      {\n        size: 60,\n        scales: [2, 3],\n      },\n      // TODO: 76x76@2x seems unused now\n      // {\n      //   size: 76,\n      //   scales: [2],\n      // },\n    ],\n  },\n  {\n    idiom: 'ipad',\n    sizes: [\n      {\n        size: 20,\n        scales: [1, 2],\n      },\n      {\n        size: 29,\n        scales: [1, 2],\n      },\n      {\n        size: 40,\n        scales: [1, 2],\n      },\n      {\n        size: 76,\n        scales: [1, 2],\n      },\n      {\n        size: 83.5,\n        scales: [2],\n      },\n    ],\n  },\n  {\n    idiom: 'ios-marketing',\n    sizes: [\n      {\n        size: 1024,\n        scales: [1],\n      },\n    ],\n  },\n];\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = [];\n\n  // keep track of icons that have been generated so we can reuse them in the Contents.json\n  const generatedIcons: Record<string, boolean> = {};\n\n  for (const platform of ICON_CONTENTS) {\n    const isMarketing = platform.idiom === 'ios-marketing';\n    for (const { size, scales } of platform.sizes) {\n      for (const scale of scales) {\n        // The marketing icon is special because it makes no sense.\n        const filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n        // Only create an image that hasn't already been generated.\n        if (!(filename in generatedIcons)) {\n          const iconSizePx = size * scale;\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: icon,\n              name: filename,\n              width: iconSizePx,\n              height: iconSizePx,\n              removeTransparency: true,\n              // The icon should be square, but if it's not then it will be cropped.\n              resizeMode: 'cover',\n              // Force the background color to solid white to prevent any transparency.\n              // TODO: Maybe use a more adaptive option based on the icon color?\n              backgroundColor: '#ffffff',\n            }\n          );\n          // Write image buffer to the file system.\n          const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          await fs.writeFile(assetPath, source);\n          // Save a reference to the generated image so we don't create a duplicate.\n          generatedIcons[filename] = true;\n        }\n        imagesJson.push({\n          idiom: platform.idiom,\n          size: `${size}x${size}`,\n          // @ts-ignore: template types not supported in TS yet\n          scale: `${scale}x`,\n          filename,\n        });\n      }\n    }\n  }\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n"],"mappings":"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"}