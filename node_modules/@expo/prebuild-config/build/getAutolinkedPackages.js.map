{"version":3,"sources":["../src/getAutolinkedPackages.ts"],"names":["getAutolinkedPackagesAsync","projectRoot","platforms","searchPaths","platformPaths","Promise","all","map","platform","silent","resolvePackagesList","allPlatformPaths","paths","Object","keys","flat","uniquePaths","Set","sort","shouldSkipAutoPlugin","config","plugin","Array","isArray","_internal","autolinkedModules","pluginId","isIncluded","includes"],"mappings":";;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,0BAAf,CACLC,WADK,EAELC,SAAwB,GAAG,CAAC,KAAD,EAAQ,SAAR,CAFtB,EAGL;AACA,QAAMC,WAAW,GAAG,MAAM,4CAAwB,IAAxB,EAA8BF,WAA9B,CAA1B;AAEA,QAAMG,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAR,CAC1BJ,SAAS,CAACK,GAAV,CAAcC,QAAQ,IACpB,qCAAiB;AACfA,IAAAA,QADe;AAEfL,IAAAA,WAFe;AAGfM,IAAAA,MAAM,EAAE;AAHO,GAAjB,CADF,CAD0B,CAA5B;AAUA,SAAOC,mBAAmB,CAACN,aAAD,CAA1B;AACD;;AAEM,SAASM,mBAAT,CAA6BN,aAA7B,EAAmE;AACxE,QAAMO,gBAAgB,GAAGP,aAAa,CAACG,GAAd,CAAkBK,KAAK,IAAIC,MAAM,CAACC,IAAP,CAAYF,KAAZ,CAA3B,EAA+CG,IAA/C,EAAzB;AAEA,QAAMC,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,gBAAR,CAAJ,CAApB;AAEA,SAAOK,WAAW,CAACE,IAAZ,EAAP;AACD;;AAEM,SAASC,oBAAT,CACLC,MADK,EAELC,MAFK,EAGL;AAAA;;AACA;AACA,MAAIA,MAAM,KAAK,iBAAf,EAAkC;AAChC,WAAO,KAAP;AACD,GAJD,CAMA;AACA;;;AACA,MAAIC,KAAK,CAACC,OAAN,sBAAcH,MAAM,CAACI,SAArB,sDAAc,kBAAkBC,iBAAhC,CAAJ,EAAwD;AACtD;AACA,UAAMC,QAAQ,GAAGJ,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAM,CAAC,CAAD,CAA9B,GAAoCA,MAArD;;AACA,QAAI,OAAOK,QAAP,KAAoB,QAAxB,EAAkC;AAChC;AACA,YAAMC,UAAU,GAAGP,MAAM,CAACI,SAAP,CAAkBC,iBAAlB,CAAoCG,QAApC,CAA6CF,QAA7C,CAAnB;;AACA,UAAI,CAACC,UAAL,EAAiB;AACf;AACA,eAAO,IAAP;AACD;AACF;AACF;;AACD,SAAO,KAAP;AACD","sourcesContent":["import { ModPlatform, StaticPlugin } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport {\n  findModulesAsync,\n  resolveSearchPathsAsync,\n} from 'expo-modules-autolinking/build/autolinking';\n\n/**\n * Returns a list of packages that are autolinked to a project.\n *\n * @param projectRoot\n * @param platforms platforms to check for\n * @returns list of packages ex: `['expo-camera', 'react-native-screens']`\n */\nexport async function getAutolinkedPackagesAsync(\n  projectRoot: string,\n  platforms: ModPlatform[] = ['ios', 'android']\n) {\n  const searchPaths = await resolveSearchPathsAsync(null, projectRoot);\n\n  const platformPaths = await Promise.all(\n    platforms.map(platform =>\n      findModulesAsync({\n        platform,\n        searchPaths,\n        silent: true,\n      })\n    )\n  );\n\n  return resolvePackagesList(platformPaths);\n}\n\nexport function resolvePackagesList(platformPaths: Record<string, any>[]) {\n  const allPlatformPaths = platformPaths.map(paths => Object.keys(paths)).flat();\n\n  const uniquePaths = [...new Set(allPlatformPaths)];\n\n  return uniquePaths.sort();\n}\n\nexport function shouldSkipAutoPlugin(\n  config: Pick<ExpoConfig, '_internal'>,\n  plugin: StaticPlugin | string\n) {\n  // Hack workaround because expo-dev-client doesn't use expo modules.\n  if (plugin === 'expo-dev-client') {\n    return false;\n  }\n\n  // Only perform the check if `autolinkedModules` is defined, otherwise we assume\n  // this is a legacy runner which doesn't support autolinking.\n  if (Array.isArray(config._internal?.autolinkedModules)) {\n    // Resolve the pluginId as a string.\n    const pluginId = Array.isArray(plugin) ? plugin[0] : plugin;\n    if (typeof pluginId === 'string') {\n      // Determine if the autolinked modules list includes our moduleId\n      const isIncluded = config._internal!.autolinkedModules.includes(pluginId);\n      if (!isIncluded) {\n        // If it doesn't then we know that any potential plugin shouldn't be applied automatically.\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"],"file":"getAutolinkedPackages.js"}