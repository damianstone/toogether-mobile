{"version":3,"file":"isLegacyImportsEnabled.js","names":["isLegacyImportsEnabled","exp","boolish","console","warn","lteSdkVersion","expJson","sdkVersion","semver","lte","Error"],"sources":["../src/isLegacyImportsEnabled.ts"],"sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AACA;AACO,SAASA,sBAAT,CAAgCC,GAAhC,EAAqE;EAC1E,IAAI,IAAAC,iBAAA,EAAQ,qBAAR,EAA+B,KAA/B,CAAJ,EAA2C;IACzCC,OAAO,CAACC,IAAR,CACE,sHADF;IAGA,OAAO,IAAP;EACD,CANyE,CAO1E;EACA;;;EACA,OAAOC,aAAa,CAACJ,GAAD,EAAM,QAAN,CAApB;AACD;;AAED,SAASI,aAAT,CAAuBC,OAAvB,EAAgEC,UAAhE,EAA6F;EAC3F,IAAI,CAACD,OAAO,CAACC,UAAb,EAAyB;IACvB,OAAO,KAAP;EACD;;EAED,IAAID,OAAO,CAACC,UAAR,KAAuB,aAA3B,EAA0C;IACxC,OAAO,KAAP;EACD;;EAED,IAAI;IACF,OAAOC,iBAAA,CAAOC,GAAP,CAAWH,OAAO,CAACC,UAAnB,EAA+BA,UAA/B,CAAP;EACD,CAFD,CAEE,MAAM;IACN,MAAM,IAAIG,KAAJ,CAAW,GAAEJ,OAAO,CAACC,UAAW,uDAAhC,CAAN;EACD;AACF"}