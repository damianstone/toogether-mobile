{"version":3,"file":"GoogleServices.js","names":["DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","withProjectBuildGradle","modResults","language","contents","setClassPath","addWarningAndroid","withApplyPlugin","withAppBuildGradle","applyPlugin","withGoogleServicesFile","withDangerousMod","setGoogleServicesFile","modRequest","projectRoot","getGoogleServicesFilePath","android","googleServicesFile","targetPath","partialSourcePath","completeSourcePath","path","resolve","destinationPath","copyFilePathToPathAsync","e","console","log","Error","buildGradle","includes","replace","appBuildGradle","pattern","RegExp","match"],"sources":["../../src/android/GoogleServices.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = (config) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"],"mappings":"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"}