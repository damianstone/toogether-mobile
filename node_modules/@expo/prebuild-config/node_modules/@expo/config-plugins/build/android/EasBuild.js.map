{"version":3,"file":"EasBuild.js","names":["APPLY_EAS_GRADLE","hasApplyLine","content","applyLine","replace","split","some","line","getEasBuildGradlePath","projectRoot","path","join","configureEasBuildAsync","buildGradlePath","Paths","getAppBuildGradleFilePath","easGradlePath","fs","promises","writeFile","gradleScript","buildGradleContent","readFile","hasEasGradleApply","trim","isEasBuildGradleConfiguredAsync","hasEasGradleFile","existsSync"],"sources":["../../src/android/EasBuild.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some((line) => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.promises.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.promises.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.promises.writeFile(\n      buildGradlePath,\n      `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`\n    );\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.existsSync(easGradlePath);\n\n  const buildGradleContent = await fs.promises.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"],"mappings":";;;;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;;;AAEA,MAAMA,gBAAgB,GAAG,kCAAzB;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAAuCC,SAAvC,EAAmE;EACjE,OACED,OAAO,CACJE,OADH,CACW,OADX,EACoB,IADpB,EAEGC,KAFH,CAES,IAFT,EAGE;EAHF,CAIGC,IAJH,CAISC,IAAD,IAAUA,IAAI,KAAKJ,SAAT,IAAsBI,IAAI,KAAKJ,SAAS,CAACC,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAJjD,CADF;AAOD;;AAEM,SAASI,qBAAT,CAA+BC,WAA/B,EAA4D;EACjE,OAAOC,eAAA,CAAKC,IAAL,CAAUF,WAAV,EAAuB,SAAvB,EAAkC,KAAlC,EAAyC,kBAAzC,CAAP;AACD;;AAEM,eAAeG,sBAAf,CAAsCH,WAAtC,EAA0E;EAC/E,MAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAN,CAAgCN,WAAhC,CAAxB;EACA,MAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAD,CAA3C;EAEA,MAAMQ,aAAA,CAAGC,QAAH,CAAYC,SAAZ,CAAsBH,aAAtB,EAAqCI,+BAArC,CAAN;EAEA,MAAMC,kBAAkB,GAAG,MAAMJ,aAAA,CAAGC,QAAH,CAAYI,QAAZ,CAAqBZ,eAAA,CAAKC,IAAL,CAAUE,eAAV,CAArB,EAAiD,MAAjD,CAAjC;EAEA,MAAMU,iBAAiB,GAAGtB,YAAY,CAACoB,kBAAD,EAAqBrB,gBAArB,CAAtC;;EAEA,IAAI,CAACuB,iBAAL,EAAwB;IACtB,MAAMN,aAAA,CAAGC,QAAH,CAAYC,SAAZ,CACJN,eADI,EAEH,GAAEQ,kBAAkB,CAACG,IAAnB,EAA0B,KAAIxB,gBAAiB,IAF9C,CAAN;EAID;AACF;;AAEM,eAAeyB,+BAAf,CAA+ChB,WAA/C,EAAsF;EAC3F,MAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAN,CAAgCN,WAAhC,CAAxB;EACA,MAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAD,CAA3C;EAEA,MAAMiB,gBAAgB,GAAG,MAAMT,aAAA,CAAGU,UAAH,CAAcX,aAAd,CAA/B;EAEA,MAAMK,kBAAkB,GAAG,MAAMJ,aAAA,CAAGC,QAAH,CAAYI,QAAZ,CAAqBZ,eAAA,CAAKC,IAAL,CAAUE,eAAV,CAArB,EAAiD,MAAjD,CAAjC;EACA,MAAMU,iBAAiB,GAAGtB,YAAY,CAACoB,kBAAD,EAAqBrB,gBAArB,CAAtC;EAEA,OAAOuB,iBAAiB,IAAIG,gBAA5B;AACD"}