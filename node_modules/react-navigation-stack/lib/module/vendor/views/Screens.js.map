{"version":3,"sources":["Screens.tsx"],"names":["React","Animated","View","Platform","Screens","require","e","WebScreen","Component","render","active","style","rest","props","display","AnimatedWebScreen","createAnimatedComponent","shouldUseActivityState","MaybeScreenContainer","enabled","OS","screensEnabled","MaybeScreen"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,QAAoD,cAApD;AAEA,IAAIC,OAAJ;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjB;AACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CACV;AACD,C,CAED;AACA;AACA;;;AACA,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAKE;AACAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiB,SAAGC;AAApB,QAA6B,KAAKC,KAAxC;AAEA,wBACE,oBAAC,IAAD,CACE;AADF;AAEE,MAAA,MAAM,EAAE,CAACH,MAFX;AAGE,MAAA,KAAK,EAAE,CAACC,KAAD,EAAQ;AAAEG,QAAAA,OAAO,EAAEJ,MAAM,GAAG,MAAH,GAAY;AAA7B,OAAR;AAHT,OAIME,IAJN,EADF;AAQD;;AAZD;;AAeF,MAAMG,iBAAiB,GAAGd,QAAQ,CAACe,uBAAT,CAAiCT,SAAjC,CAA1B,C,CAEA;;AACA,OAAO,MAAMU,sBAAsB,eAAGb,OAAH,6CAAG,SAASa,sBAAxC;AAEP,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,OADmC;AAEnC,KAAGP;AAFgC,CAAD,KAM9B;AAAA;;AACJ,MAAIO,OAAO,IAAIhB,QAAQ,CAACiB,EAAT,KAAgB,KAA3B,kBAAoChB,OAApC,8CAAoC,UAASiB,cAAT,EAApC,CAAJ,EAAmE;AACjE;AAAA;AACE;AACA,0BAAC,OAAD,CAAS,eAAT;AAAyB,QAAA,OAAO,EAAEF;AAAlC,SAA+CP,IAA/C;AAFF;AAID;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CAfM;AAiBP,OAAO,MAAMU,WAAW,GAAG,CAAC;AAC1BH,EAAAA,OAD0B;AAE1BT,EAAAA,MAF0B;AAG1B,KAAGE;AAHuB,CAAD,KAQrB;AAAA;;AACJ,MAAIO,OAAO,IAAIhB,QAAQ,CAACiB,EAAT,KAAgB,KAA/B,EAAsC;AACpC,wBAAO,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEV;AAA3B,OAAuCE,IAAvC,EAAP;AACD;;AAED,MAAIO,OAAO,kBAAIf,OAAJ,8CAAI,UAASiB,cAAT,EAAJ,CAAX,EAA0C;AACxC,QAAIJ,sBAAJ,EAA4B;AAC1B;AAAA;AACE;AACA,4BAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,OAAO,EAAEE,OAAzB;AAAkC,UAAA,aAAa,EAAET;AAAjD,WAA6DE,IAA7D;AAFF;AAID,KALD,MAKO;AACL;AAAA;AACE;AACA,4BAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,OAAO,EAAEO,OAAzB;AAAkC,UAAA,MAAM,EAAET;AAA1C,WAAsDE,IAAtD;AAFF;AAID;AACF;;AAED,sBAAO,oBAAC,IAAD,EAAUA,IAAV,CAAP;AACD,CA5BM","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]}