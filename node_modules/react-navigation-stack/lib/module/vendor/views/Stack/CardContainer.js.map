{"version":3,"sources":["CardContainer.tsx"],"names":["React","View","StyleSheet","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","useTheme","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","isCurrentHeaderShown","previousScene","current","marginTop","backgroundColor","background","overflow","undefined","absoluteFill","styles","container","scenes","styleInterpolator","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport useTheme from '../../../utils/useTheme';\nimport type {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}