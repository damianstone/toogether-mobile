{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","TextInput","Keyboard","KeyboardManager","Component","undefined","keyboardTimeout","clearTimeout","props","enabled","clearKeyboardTimeout","input","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","force","dismiss","setTimeout","focusTextInput","componentWillUnmount","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAmD,cAAnD;AAaA,eAAe,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAAqD;AAAA;AAAA;;AAAA,wDAOnBC,SAPmB;;AAAA,4CAQjC,CARiC;;AAAA;;AAAA,kDAWnC,MAAM;AACnC,UAAI,KAAKC,eAAL,KAAyBD,SAA7B,EAAwC;AACtCE,QAAAA,YAAY,CAAC,KAAKD,eAAN,CAAZ;AACA,aAAKA,eAAL,GAAuBD,SAAvB;AACD;AACF,KAhBiE;;AAAA,mDAkBlC,MAAM;AACpC,UAAI,CAAC,KAAKG,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL,GALoC,CAOpC;;AACA,YAAMC,KAAe,GAAGV,SAAS,CAACW,KAAV,CAAgBC,qBAAhB,GACpBZ,SAAS,CAACW,KAAV,CAAgBC,qBAAhB,EADoB,GAEpBZ,SAAS,CAACW,KAAV,CAAgBE,qBAAhB,EAFJ,CARoC,CAYpC;;AACAb,MAAAA,SAAS,CAACW,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B,EAboC,CAepC;;AACA,WAAKK,0BAAL,GAAkCL,KAAlC,CAhBoC,CAkBpC;;AACA,WAAKM,cAAL,GAAsBC,IAAI,CAACC,GAAL,EAAtB;AACD,KAtCiE;;AAAA,qDAwC/BC,KAAD,IAAoB;AACpD,UAAI,CAAC,KAAKZ,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL;;AAEA,UAAIU,KAAJ,EAAW;AACT;AACA;AACA;AACAlB,QAAAA,QAAQ,CAACmB,OAAT;AACD,OALD,MAKO;AACL,cAAMV,KAAK,GAAG,KAAKK,0BAAnB;;AAEA,YAAIL,KAAJ,EAAW;AACT;AACA;AACAV,UAAAA,SAAS,CAACW,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B;AACD;AACF,OApBmD,CAsBpD;;;AACA,WAAKK,0BAAL,GAAkCX,SAAlC;AACD,KAhEiE;;AAAA,oDAkEjC,MAAM;AACrC,UAAI,CAAC,KAAKG,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL,GALqC,CAOrC;;AACA,YAAMC,KAAK,GAAG,KAAKK,0BAAnB;;AAEA,UAAIL,KAAJ,EAAW;AACT;AAEA;AACA;AACA;AACA;AACA;AACA,YAAIO,IAAI,CAACC,GAAL,KAAa,KAAKF,cAAlB,GAAmC,GAAvC,EAA4C;AAC1C,eAAKX,eAAL,GAAuBgB,UAAU,CAAC,MAAM;AACtCrB,YAAAA,SAAS,CAACW,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;AACA,iBAAKK,0BAAL,GAAkCX,SAAlC;AACD,WAHgC,EAG9B,GAH8B,CAAjC;AAID,SALD,MAKO;AACLJ,UAAAA,SAAS,CAACW,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;AACA,eAAKK,0BAAL,GAAkCX,SAAlC;AACD;AACF;AACF,KA9FiE;AAAA;;AAClEmB,EAAAA,oBAAoB,GAAG;AACrB,SAAKd,oBAAL;AACD,GAHiE,CAKlE;AACA;;;AA0FAe,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKjB,KAAL,CAAWkB,QAAX,CAAoB;AACzBC,MAAAA,iBAAiB,EAAE,KAAKC,qBADC;AAEzBC,MAAAA,mBAAmB,EAAE,KAAKC,uBAFD;AAGzBC,MAAAA,kBAAkB,EAAE,KAAKC;AAHA,KAApB,CAAP;AAKD;;AAtGiE","sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard, HostComponent } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: (force: boolean) => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: InputRef = undefined;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // @ts-expect-error: blurTextInput accepts both number and ref, but types say only ref\n    const input: InputRef = TextInput.State.currentlyFocusedInput\n      ? TextInput.State.currentlyFocusedInput()\n      : TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = (force: boolean) => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    if (force) {\n      // Always dismiss input, even if we don't have a ref to it\n      // We might not have the ref if onPageChangeStart was never called\n      // This can happen if page change was not from a gesture\n      Keyboard.dismiss();\n    } else {\n      const input = this.previouslyFocusedTextInput;\n\n      if (input) {\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        TextInput.State.blurTextInput(input);\n      }\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = undefined;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = undefined;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = undefined;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]}