{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","React","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","Platform","OS","filter","r","includes","findIndex","props","navigation","getComponent","SceneComponent","screenProps","isTransitioning","dispatch","StackActions","completeTransition","toChildKey","handleTransitionComplete","some","NavigationActions","navigate","setState","pop","prune","closing","onTransitionStart","onTransitionEnd","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","render","keyboardHandlingEnabled","mode","headerMode","_","rest","styles","container","insets","isParentHeaderShown","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","handleGestureStart","handleGestureEnd","handleGestureCancel","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  private handleGestureStart = () => {\n    // Do nothing\n  };\n\n  private handleGestureEnd = () => {\n    // Do nothing\n  };\n\n  private handleGestureCancel = () => {\n    // Do nothing\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}