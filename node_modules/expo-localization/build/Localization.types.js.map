{"version":3,"file":"Localization.types.js","sourceRoot":"","sources":["../src/Localization.types.ts"],"names":[],"mappings":"","sourcesContent":["export type Localization = {\n  /**\n   * Three-character ISO 4217 currency code. Returns `null` on web.\n   *\n   * @example `USD`, `EUR`, `CNY`, null\n   */\n  currency: string | null;\n  /**\n   * Decimal separator used for formatting numbers.\n   *\n   * @example `,`, '.'\n   */\n  decimalSeparator: string;\n  /**\n   * Digit grouping separator used when formatting numbers larger than 1000.\n   *\n   * @example `.`, '', ','\n   */\n  digitGroupingSeparator: string;\n  /**\n   * List of all the supported language ISO codes.\n   */\n  isoCurrencyCodes: string[];\n  /**\n   * Boolean value that indicates whether the system uses the metric system.\n   * On Android and web, this is inferred from the current region.\n   */\n  isMetric: boolean;\n  /**\n   * Returns if the system's language is written from Right-to-Left.\n   * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n   *\n   * Returns `false` in SSR environments.\n   */\n  isRTL: boolean;\n  /**\n   * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n   * consisting of a two-character language code and optional script, region and variant codes.\n   *\n   * @example `en`, `en-US`, `zh-Hans`, `zh-Hans-CN`, `en-emodeng`\n   */\n  locale: string;\n  /**\n   * List of all the languages provided by the user settings.\n   * These are returned in the order the user defines in their device settings.\n   *\n   * @example [`en`, `en-US`, `zh-Hans`, `zh-Hans-CN`, `en-emodeng`]\n   */\n  locales: string[];\n  /**\n   * The region code for your device that comes from the Region setting under Language & Region on iOS.\n   * This value is always available on iOS, but might return `null` on Android or web.\n   *\n   * @example `US`, `NZ`, null\n   */\n  region: string | null;\n  /**\n   * The current timezone in display format.\n   * On Web timezone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a better estimation you could use the moment-timezone package but it will add significant bloat to your website's bundle size.\n   *\n   * @example `America/Los_Angeles`\n   */\n  timezone: string;\n};\n"]}