{"version":3,"sources":["DrawerView.tsx"],"names":["React","Dimensions","StyleSheet","SceneView","ThemeColors","ThemeContext","ScreenContainer","screensEnabled","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","Drawer","DrawerView","PureComponent","loaded","props","navigation","state","index","drawerWidth","navigationConfig","createRef","descriptors","activeKey","routes","key","drawerLockMode","options","dispatch","openDrawer","closeDrawer","setState","progress","screenProps","lazy","detachInactiveScreens","unmountInactiveRoutes","descriptor","getComponent","enabled","styles","content","map","route","includes","isFocused","absoluteFill","opacity","ref","drawerGestureRef","current","getDerivedStateFromProps","nextProps","prevState","componentDidMount","getLockMode","handleDrawerOpen","addEventListener","updateWidth","componentDidUpdate","prevProps","prevLockMode","nextLockMode","handleDrawerClose","componentWillUnmount","removeEventListener","getDrawerBackgroundColor","drawerBackgroundColor","context","bodyContent","getOverlayColor","overlayColor","render","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","isDrawerOpen","setDrawerGestureRef","drawerPosition","backgroundColor","width","renderNavigationView","renderContent","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n  detachInactiveScreens: boolean;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation, detachInactiveScreens = true } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      const enabled = screensEnabled?.() && detachInactiveScreens;\n\n      return (\n        // @ts-ignore\n        <ScreenContainer enabled={enabled} style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}