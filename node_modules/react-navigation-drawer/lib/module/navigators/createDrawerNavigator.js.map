{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["React","Dimensions","Platform","ScrollView","I18nManager","createNavigator","ThemeColors","SafeAreaView","DrawerRouter","DrawerView","DrawerItems","defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","height","width","get","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","contentComponent","drawerPosition","isRTL","keyboardDismissMode","drawerBackgroundColor","light","bodyContent","dark","overlayColor","drawerType","hideStatusBar","statusBarAnimation","DrawerNavigator","routeConfigs","config","mergedConfig","drawerRouter","navigator"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,WAA3C,QAA8D,cAA9D;AACA,SACEC,eADF,EAEEC,WAFF,EAGEC,YAHF,QAOO,kBAPP;AAQA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AASA,MAAMC,uBAAuB,GAAIC,KAAD,iBAC9B,oBAAC,UAAD;AAAY,EAAA,oBAAoB,EAAE;AAAlC,gBACE,oBAAC,YAAD;AAAc,EAAA,UAAU,EAAE;AAAEC,IAAAA,GAAG,EAAE,QAAP;AAAiBC,IAAAA,UAAU,EAAE;AAA7B;AAA1B,gBACE,oBAAC,WAAD,EAAiBF,KAAjB,CADF,CADF,CADF;;AAQA,MAAMG,mBAA2C,GAAG;AAClDC,EAAAA,WAAW,EAAE,MAAM;AACjB;;;;;AAKA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAoBjB,UAAU,CAACkB,GAAX,CAAe,QAAf,CAA1B;AACA,UAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASL,MAAT,EAAiBC,KAAjB,CAAxB;AACA,UAAMK,WAAW,GAAGL,KAAK,GAAGD,MAA5B;AACA,UAAMO,QAAQ,GAAGJ,eAAe,IAAI,GAApC;AACA,UAAMK,YAAY,GAAGvB,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GAAyBH,WAAW,GAAG,EAAH,GAAQ,EAA5C,GAAkD,EAAvE;AACA,UAAMI,QAAQ,GAAGH,QAAQ,GAAG,GAAH,GAAS,GAAlC;AAEA,WAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCE,QAAzC,CAAP;AACD,GAfiD;AAgBlDC,EAAAA,gBAAgB,EAAEjB,uBAhBgC;AAiBlDkB,EAAAA,cAAc,EAAEzB,WAAW,CAAC0B,KAAZ,GAAoB,OAApB,GAA8B,MAjBI;AAkBlDC,EAAAA,mBAAmB,EAAE,SAlB6B;AAmBlDC,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,KAAK,EAAE3B,WAAW,CAAC2B,KAAZ,CAAkBC,WADJ;AAErBC,IAAAA,IAAI,EAAE7B,WAAW,CAAC6B,IAAZ,CAAiBD;AAFF,GAnB2B;AAuBlDE,EAAAA,YAAY,EAAE;AACZH,IAAAA,KAAK,EAAE,oBADK;AAEZE,IAAAA,IAAI,EAAE;AAFM,GAvBoC;AA2BlDE,EAAAA,UAAU,EAAE,OA3BsC;AA4BlDC,EAAAA,aAAa,EAAE,KA5BmC;AA6BlDC,EAAAA,kBAAkB,EAAE;AA7B8B,CAApD;;AAgCA,MAAMC,eAAe,GAAG,CACtBC,YADsB,EAKtBC,MAKC,GAAG,EAVkB,KAWnB;AACH,QAAMC,YAAY,GAAG,EAAE,GAAG5B,mBAAL;AAA0B,OAAG2B;AAA7B,GAArB;AACA,QAAME,YAAY,GAAGpC,YAAY,CAACiC,YAAD,EAAeE,YAAf,CAAjC,CAFG,CAIH;;AACA,QAAME,SAAS,GAAGxC,eAAe,CAC/BI,UAD+B,EAE/BmC,YAF+B,EAG/BD,YAH+B,CAAjC;AAKA,SAAOE,SAAP;AACD,CAtBD;;AAwBA,eAAeL,eAAf","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, ScrollView, I18nManager } from 'react-native';\nimport {\n  createNavigator,\n  ThemeColors,\n  SafeAreaView,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationRoute,\n} from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\nimport {\n  NavigationDrawerOptions,\n  NavigationDrawerProp,\n  NavigationDrawerConfig,\n  NavigationDrawerRouterConfig,\n  DrawerContentComponentProps,\n} from '../types';\n\nconst defaultContentComponent = (props: DrawerContentComponentProps) => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig: NavigationDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent,\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)',\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n};\n\nconst DrawerNavigator = (\n  routeConfigs: NavigationRouteConfigMap<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationDrawerConfig,\n    NavigationDrawerRouterConfig,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  > = {}\n) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n\n  // TODO: don't have time to fix it right now\n  const navigator = createNavigator(\n    DrawerView as any,\n    drawerRouter,\n    mergedConfig\n  );\n  return navigator;\n};\n\nexport default DrawerNavigator;\n"]}