{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","React","Component","getActiveTintColor","activeTintColor","props","context","getInactiveTintColor","inactiveTintColor","getActiveBackgroundColor","activeBackgroundColor","getInactiveBackgroundColor","inactiveBackgroundColor","render","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","vertical","inactiveIcon","light","dark","ThemeContext","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]}