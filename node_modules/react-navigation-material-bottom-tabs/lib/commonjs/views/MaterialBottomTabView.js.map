{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["MaterialBottomTabView","React","Component","route","descriptors","props","descriptor","key","options","context","tabBarColorDark","tabBarColorLight","tabBarColor","activeColor","activeColorLight","activeColorDark","inactiveColor","inactiveColorLight","inactiveColorDark","barStyle","barStyleLight","barStyleDark","focused","color","renderIcon","tintColor","_isVisible","navigation","state","routes","index","tabBarVisible","render","rest","_getactiveColor","_getInactiveColor","_getBarStyle","isVisible","extraStyle","display","position","undefined","_renderIcon","_getColor","ThemeContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ThemeContext,\n  NavigationProp,\n  NavigationDescriptor,\n} from 'react-navigation';\nimport { BottomNavigation } from 'react-native-paper';\nimport { NavigationMaterialBottomTabConfig } from '../types';\nimport { ViewStyle } from 'react-native';\n\ntype Options = {\n  tabBarVisible?: boolean;\n  tabBarColor?: string;\n  tabBarColorLight?: string;\n  tabBarColorDark?: string;\n};\n\ntype Props = React.ComponentProps<typeof BottomNavigation> &\n  NavigationMaterialBottomTabConfig & {\n    navigation: NavigationProp<any>;\n    descriptors: { [key: string]: NavigationDescriptor<any, Options> };\n    screenProps?: unknown;\n    renderIcon: (options: {\n      route: { key: string };\n      focused: boolean;\n      tintColor: string;\n    }) => React.ReactNode;\n  };\n\nexport default class MaterialBottomTabView extends React.Component<Props> {\n  static contextType = ThemeContext;\n\n  _getColor = ({ route }: { route: { key: string } }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (this.context === 'dark' && options.tabBarColorDark) {\n      return options.tabBarColorDark;\n    } else if (options.tabBarColorLight) {\n      return options.tabBarColorLight;\n    } else {\n      return options.tabBarColor;\n    }\n  };\n\n  _getactiveColor = () => {\n    let { activeColor, activeColorLight, activeColorDark } = this.props;\n\n    if (this.context === 'dark' && activeColorDark) {\n      return activeColorDark;\n    } else if (activeColorLight) {\n      return activeColorLight;\n    } else {\n      return activeColor;\n    }\n  };\n\n  _getInactiveColor = () => {\n    let { inactiveColor, inactiveColorLight, inactiveColorDark } = this.props;\n\n    if (this.context === 'dark' && inactiveColorDark) {\n      return inactiveColorDark;\n    } else if (inactiveColorLight) {\n      return inactiveColorLight;\n    } else {\n      return inactiveColor;\n    }\n  };\n\n  _getBarStyle = () => {\n    let { barStyle, barStyleLight, barStyleDark } = this.props;\n\n    return [barStyle, this.context === 'dark' ? barStyleDark : barStyleLight];\n  };\n\n  _isVisible() {\n    const { navigation, descriptors } = this.props;\n    const { state } = navigation;\n    const route = state.routes[state.index];\n    const options = descriptors[route.key].options;\n    return options.tabBarVisible;\n  }\n\n  _renderIcon = ({\n    route,\n    focused,\n    color,\n  }: {\n    route: { key: string };\n    focused: boolean;\n    color: string;\n  }) => {\n    return this.props.renderIcon({ route, focused, tintColor: color });\n  };\n\n  render() {\n    const {\n      navigation,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const activeColor = this._getactiveColor();\n    const inactiveColor = this._getInactiveColor();\n    const barStyle = this._getBarStyle();\n\n    const isVisible = this._isVisible();\n    const extraStyle: ViewStyle | null =\n      isVisible === false\n        ? {\n            display: 'none',\n            // When keyboard is shown, `position` is set to `absolute` in the library\n            // This somehow breaks `display: 'none'`, so we explcitely override `position`\n            position: undefined,\n          }\n        : null;\n\n    return (\n      <BottomNavigation\n        // Pass these for backward compaibility\n        {...rest}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        renderIcon={this._renderIcon}\n        barStyle={[barStyle, extraStyle]}\n        navigationState={navigation.state}\n        getColor={this._getColor}\n      />\n    );\n  }\n}\n"]}