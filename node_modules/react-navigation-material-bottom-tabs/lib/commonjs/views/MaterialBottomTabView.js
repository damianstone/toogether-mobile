"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNavigation = require("react-navigation");

var _reactNativePaper = require("react-native-paper");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MaterialBottomTabView extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_getColor", ({
      route
    }) => {
      const {
        descriptors
      } = this.props;
      const descriptor = descriptors[route.key];
      const options = descriptor.options;

      if (this.context === 'dark' && options.tabBarColorDark) {
        return options.tabBarColorDark;
      } else if (options.tabBarColorLight) {
        return options.tabBarColorLight;
      } else {
        return options.tabBarColor;
      }
    });

    _defineProperty(this, "_getactiveColor", () => {
      let {
        activeColor,
        activeColorLight,
        activeColorDark
      } = this.props;

      if (this.context === 'dark' && activeColorDark) {
        return activeColorDark;
      } else if (activeColorLight) {
        return activeColorLight;
      } else {
        return activeColor;
      }
    });

    _defineProperty(this, "_getInactiveColor", () => {
      let {
        inactiveColor,
        inactiveColorLight,
        inactiveColorDark
      } = this.props;

      if (this.context === 'dark' && inactiveColorDark) {
        return inactiveColorDark;
      } else if (inactiveColorLight) {
        return inactiveColorLight;
      } else {
        return inactiveColor;
      }
    });

    _defineProperty(this, "_getBarStyle", () => {
      let {
        barStyle,
        barStyleLight,
        barStyleDark
      } = this.props;
      return [barStyle, this.context === 'dark' ? barStyleDark : barStyleLight];
    });

    _defineProperty(this, "_renderIcon", ({
      route,
      focused,
      color
    }) => {
      return this.props.renderIcon({
        route,
        focused,
        tintColor: color
      });
    });
  }

  _isVisible() {
    const {
      navigation,
      descriptors
    } = this.props;
    const {
      state
    } = navigation;
    const route = state.routes[state.index];
    const options = descriptors[route.key].options;
    return options.tabBarVisible;
  }

  render() {
    const {
      navigation,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      descriptors,
      ...rest
    } = this.props;

    const activeColor = this._getactiveColor();

    const inactiveColor = this._getInactiveColor();

    const barStyle = this._getBarStyle();

    const isVisible = this._isVisible();

    const extraStyle = isVisible === false ? {
      display: 'none',
      // When keyboard is shown, `position` is set to `absolute` in the library
      // This somehow breaks `display: 'none'`, so we explcitely override `position`
      position: undefined
    } : null;
    return /*#__PURE__*/React.createElement(_reactNativePaper.BottomNavigation // Pass these for backward compaibility
    , _extends({}, rest, {
      activeColor: activeColor,
      inactiveColor: inactiveColor,
      renderIcon: this._renderIcon,
      barStyle: [barStyle, extraStyle],
      navigationState: navigation.state,
      getColor: this._getColor
    }));
  }

}

exports.default = MaterialBottomTabView;

_defineProperty(MaterialBottomTabView, "contextType", _reactNavigation.ThemeContext);
//# sourceMappingURL=MaterialBottomTabView.js.map