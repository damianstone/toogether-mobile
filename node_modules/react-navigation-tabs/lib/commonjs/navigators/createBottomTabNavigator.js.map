{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["TabNavigationView","React","PureComponent","loaded","props","navigation","state","index","route","descriptors","descriptor","key","options","tabBarButtonComponent","undefined","tabBarComponent","TabBarComponent","BottomTabBar","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","routes","tabBarVisible","_jumpTo","_getButtonComponent","onIndexChange","findIndex","getDerivedStateFromProps","nextProps","prevState","includes","render","renderScene","lazy","detachInactiveScreens","enabled","styles","container","pages","map","isFocused","StyleSheet","absoluteFill","_renderTabBar","focused","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { NavigationRoute } from 'react-navigation';\n\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\nimport {\n  NavigationTabProp,\n  NavigationBottomTabOptions,\n  BottomTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Config = {\n  lazy?: boolean;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: BottomTabBarOptions;\n  detachInactiveScreens?: boolean;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    getAccessibilityRole: (props: {\n      route: NavigationRoute;\n    }) => AccessibilityRole | undefined;\n    getAccessibilityStates: (props: {\n      route: NavigationRoute;\n      focused: boolean;\n    }) => string[];\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\ntype State = {\n  loaded: number[];\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: (): AccessibilityRole => 'button',\n    getAccessibilityStates: ({ focused }: { focused: boolean }) =>\n      focused ? ['selected'] : [],\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarButtonComponent) {\n      return options.tabBarButtonComponent;\n    }\n\n    return undefined;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={this._getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const {\n      navigation,\n      renderScene,\n      lazy,\n      detachInactiveScreens = true,\n    } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    const enabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <View style={styles.container}>\n        {/* @ts-ignore */}\n        <ScreenContainer enabled={enabled} style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\n  TabNavigationView\n);\n"]}