{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["React","TabView","createTabNavigator","MaterialTopTabBar","MaterialTabView","PureComponent","props","state","navigation","route","routes","index","descriptors","descriptor","key","options","tabBarVisible","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","render","lazyPlaceholderComponent","pagerComponent","rest","swipeEnabled","renderTabBar","undefined","createElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport {\n  NavigationTabProp,\n  NavigationMaterialTabOptions,\n  MaterialTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Route = {\n  key: string;\n  routeName: string;\n};\n\ntype Config = {\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEnabled?: boolean;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  initialLayout?: { width?: number; height?: number };\n  lazy?: boolean;\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\n  pagerComponent?: React.ComponentType<\n    Parameters<React.ComponentProps<typeof TabView>['renderPager']>[0]\n  >;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: MaterialTabBarOptions;\n  tabBarPosition?: 'top' | 'bottom';\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    onSwipeStart?: () => void;\n    onSwipeEnd?: () => void;\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\nclass MaterialTabView extends React.PureComponent<Props> {\n  private renderTabBar = (props: SceneRendererProps) => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      navigation,\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n      screenProps,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={screenProps}\n        navigation={navigation}\n        getLabelText={getLabelText}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n      />\n    );\n  };\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      tabBarComponent,\n      tabBarOptions,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      lazyPlaceholderComponent,\n      pagerComponent,\n      navigation,\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const { state } = navigation;\n    const route = state.routes[state.index];\n\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      // @ts-ignore\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : (options as any).swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        swipeEnabled={swipeEnabled}\n        renderTabBar={this.renderTabBar}\n        renderLazyPlaceholder={\n          lazyPlaceholderComponent !== undefined\n            ? (props) => React.createElement(lazyPlaceholderComponent, props)\n            : undefined\n        }\n        renderPager={\n          pagerComponent !== undefined\n            ? (props) => React.createElement(pagerComponent, props)\n            : undefined\n        }\n      />\n    );\n  }\n}\n\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\n  MaterialTabView\n);\n"]}