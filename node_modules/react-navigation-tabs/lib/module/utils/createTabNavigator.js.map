{"version":3,"sources":["createTabNavigator.tsx"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","SwitchActions","createTabNavigator","TabView","NavigationView","Component","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","navigation","focused","tintColor","horizontal","options","tabBarIcon","tabBarLabel","title","routeName","tabBarAccessibilityLabel","label","_getLabelText","routes","state","indexOf","length","undefined","tabBarTestID","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_isTabPress","Promise","resolve","then","defaultHandler","_makeDefaultHandler","tabBarOnPress","tabBarOnLongPress","jumpTo","render","navigationConfig","_getAccessibilityLabel","_getTestID","_renderIcon","_renderScene","_handleIndexChange","_handleTabPress","_handleTabLongPress","config","router"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"]}