{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["React","View","StyleSheet","TabBar","Animated","TabBarTop","PureComponent","route","focused","color","showLabel","upperCaseLabel","labelStyle","allowFontScaling","props","label","getLabelText","styles","toUpperCase","tintColor","renderIcon","showIcon","iconStyle","icon","render","navigation","activeTintColor","inactiveTintColor","tabBarPosition","screenProps","rest","state","_renderIcon","_renderLabel","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]}