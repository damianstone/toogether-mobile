{"version":3,"sources":["TextInputOutlined.tsx"],"names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","fontVariant","lineHeight","height","backgroundColor","background","textAlign","viewStyle","flatten","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","labelContainer","paddingTop","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","Outline","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]}