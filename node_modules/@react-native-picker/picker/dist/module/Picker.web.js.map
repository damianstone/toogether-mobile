{"version":3,"sources":["Picker.web.js"],"names":["React","unstable_createElement","forwardRef","PickerItem","Select","props","forwardedRef","ref","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","handleChange","useCallback","e","selectedIndex","value","target","undefined","Item"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,sBAAR,QAAqC,kBAArC;AACA,SAAQC,UAAR,QAAyB,OAAzB;AAIA,OAAOC,UAAP,MAAuB,cAAvB;AAmBA,MAAMC,MAAM,gBAAGF,UAAU,CAAC,CAACG,KAAD,EAAaC,YAAb,KACxBL,sBAAsB,CAAC,QAAD,EAAW,EAC/B,GAAGI,KAD4B;AAE/BE,EAAAA,GAAG,EAAED;AAF0B,CAAX,CADC,CAAzB;AAOA,MAAME,MAAmD,gBAAGN,UAAU,CAGpE,CAACG,KAAD,EAAQC,YAAR,KAAyB;AACzB,QAAM;AACJG,IAAAA,OADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,IALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,iBAPI;AAQJ,OAAGC;AARC,MASFX,KATJ;AAWA,QAAMY,YAAY,GAAGjB,KAAK,CAACkB,WAAN,CAClBC,CAAD,IAAe;AACb,UAAM;AAACC,MAAAA,aAAD;AAAgBC,MAAAA;AAAhB,QAAyBF,CAAC,CAACG,MAAjC;;AACA,QAAIZ,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACW,KAAD,EAAQD,aAAR,CAAb;AACD;AACF,GANkB,EAOnB,CAACV,aAAD,CAPmB,CAArB;AAUA;AAAA;AACE;AACA,wBAAC,MAAD;AACE,MAAA,QAAQ,EAAED,OAAO,KAAK,KAAZ,GAAoB,IAApB,GAA2Bc,SADvC;AAEE,MAAA,QAAQ,EAAEN,YAFZ;AAGE,MAAA,GAAG,EAAEX,YAHP;AAIE,MAAA,KAAK,EAAEK;AAJT,OAKMK,KALN;AAFF;AAUD,CAnCqE,CAAtE,C,CAqCA;;AACAR,MAAM,CAACgB,IAAP,GAAcrB,UAAd;AAEA,eAAeK,MAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport {unstable_createElement} from 'react-native-web';\nimport {forwardRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  unstable_createElement('select', {\n    ...props,\n    ref: forwardedRef,\n  }),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={forwardedRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]}