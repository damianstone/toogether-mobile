{"version":3,"sources":["Picker.web.js"],"names":["createElement","ReactNativeWeb","unstable_createElement","Select","props","forwardedRef","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","hostRef","handleChange","React","useCallback","e","selectedIndex","value","target","undefined","Item","PickerItem"],"mappings":";;;;;;;AAOA;;AACA;;AAKA;;;;;;;;;;AAmBA,MAAMA,aAAa,GACjBC,cAAc,CAACD,aAAf,IAAgCC,cAAc,CAACC,sBADjD;AAGA,MAAMC,MAAM,gBAAG,sBAAW,CAACC,KAAD,EAAaC,YAAb,KACxBL,aAAa,CAAC,QAAD,EAAWI,KAAX,CADA,CAAf;AAIA,MAAME,MAAmD,gBAAG,sBAG1D,CAACF,KAAD,EAAQC,YAAR,KAAyB;AACzB,QAAM;AACJE,IAAAA,OADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,IALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,iBAPI;AAQJ,OAAGC;AARC,MASFV,KATJ;AAWA,QAAMW,OAAO,GAAG,kBAAO,IAAP,CAAhB;AAEA,QAAMC,YAAY,GAAGC,KAAK,CAACC,WAAN,CAClBC,CAAD,IAAe;AACb,UAAM;AAACC,MAAAA,aAAD;AAAgBC,MAAAA;AAAhB,QAAyBF,CAAC,CAACG,MAAjC;;AACA,QAAId,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACa,KAAD,EAAQD,aAAR,CAAb;AACD;AACF,GANkB,EAOnB,CAACZ,aAAD,CAPmB,CAArB;AAUA;AAAA;AACE;AACA,wBAAC,MAAD;AACE,MAAA,QAAQ,EAAED,OAAO,KAAK,KAAZ,GAAoB,IAApB,GAA2BgB,SADvC;AAEE,MAAA,QAAQ,EAAEP,YAFZ;AAGE,MAAA,GAAG,EAAED,OAHP;AAIE,MAAA,KAAK,EAAEN;AAJT,OAKMK,KALN;AAFF;AAUD,CArC2D,CAA5D,C,CAuCA;;AACAR,MAAM,CAACkB,IAAP,GAAcC,mBAAd;eAEenB,M","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst createElement =\n  ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  createElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]}