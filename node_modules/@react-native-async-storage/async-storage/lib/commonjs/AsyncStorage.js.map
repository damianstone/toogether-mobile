{"version":3,"sources":["AsyncStorage.js"],"names":["merge","mergeOptions","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport mergeOptions from 'merge-options';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge(oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"]}