{"version":3,"sources":["TabBarIndicator.tsx"],"names":["React","StyleSheet","I18nManager","Animated","Easing","OldEasing","EasingNode","memoize","multiply","Extrapolate","interpolate","interpolateNode","TabBarIndicator","Component","navigationState","layout","width","getTabWidth","props","isIndicatorShown","routes","every","_","i","timing","opacity","duration","toValue","easing","in","linear","start","Value","position","inputRange","map","outputRange","reduce","acc","translateX","extrapolate","CLAMP","isRTL","componentDidMount","fadeInIndicator","componentDidUpdate","render","style","length","getTranslateX","indicatorWidth","getWidth","styles","indicator","transform","left","index","create","backgroundColor","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nconst Easing = EasingNode || OldEasing;\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nconst { multiply, Extrapolate } = Animated;\n\n// @ts-ignore\nconst interpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        duration: 150,\n        toValue: 1,\n        easing: Easing.in(Easing.linear),\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n\n      // every index contains widths at all previous indices\n      const outputRange = routes.reduce<number[]>((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n\n      const translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }\n  );\n\n  private getWidth = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n    }\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const translateX =\n      routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n\n    const indicatorWidth =\n      width === 'auto'\n        ? routes.length > 1\n          ? this.getWidth(position, routes, getTabWidth)\n          : getTabWidth(0)\n        : width;\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          { width: indicatorWidth },\n          layout.width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]}