{"version":3,"sources":["Pager.tsx"],"names":["React","StyleSheet","TextInput","Keyboard","I18nManager","InteractionManager","PanGestureHandler","State","Animated","Easing","OldEasing","EasingNode","memoize","Clock","Value","onChange","and","or","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","PagerContext","createContext","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","SPRING_VELOCITY_SCALE","TIMING_CONFIG","duration","easing","out","cubic","Pager","Component","enabled","childPanGestureHandlerRefs","addGestureHandlerRef","ref","state","includes","mounted","setState","prevState","createRef","UNDETERMINED","props","navigationState","index","layout","width","routes","length","swipeVelocityImpact","undefined","springVelocityScale","layoutWidth","progress","springConfig","timingConfig","isSwipeGesture","setValue","nextIndex","key","keyboardDismissMode","onIndexChange","findIndex","route","jumpToIndex","dismiss","type","listener","enterListeners","push","indexOf","splice","value","Math","forEach","toValue","frameTime","position","time","finished","clock","isRTL","initialVelocityForSpring","velocityX","velocity","gestureX","nativeEvent","translationX","gestureState","gesturesEnabled","routesLength","toggleEnabled","currentIndexValue","pendingIndexValue","forceUpdate","lastEnteredIndex","handleEnteredIndexChange","isSwiping","indexAtSwipeEnd","currentIndex","onSwipeStart","onSwipeEnd","interactionHandle","createInteractionHandle","input","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","clearInteractionHandle","focusTextInput","ACTIVE","maybeCancel","offsetX","transitionTo","extrapolatedPosition","translateX","componentDidMount","context","gestureHandlerRef","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","getTranslateX","addListener","removeListener","jumpTo","handleGestureEvent","styles","container","transform","providerVal","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Keyboard,\n  I18nManager,\n  InteractionManager,\n} from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\nconst Easing = EasingNode || OldEasing;\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype ComponentState = {\n  enabled: boolean;\n  childPanGestureHandlerRefs: React.RefObject<PanGestureHandler>[];\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  or,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst PagerContext = React.createContext({});\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst SPRING_VELOCITY_SCALE = 1;\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<\n  Props<T>,\n  ComponentState\n> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n    springVelocityScale: SPRING_VELOCITY_SCALE,\n  };\n\n  state = {\n    enabled: true,\n    childPanGestureHandlerRefs: [] as React.RefObject<PanGestureHandler>[],\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n\n    // Register this PanGestureHandler with the parent (if parent exists)\n    // in order to coordinate gestures between handlers.\n    if (this.context && this.context.addGestureHandlerRef) {\n      this.context.addGestureHandlerRef(this.gestureHandlerRef);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springVelocityScale,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact !== undefined\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springVelocityScale !== springVelocityScale) {\n      this.springVelocityScale.setValue(\n        springVelocityScale !== undefined\n          ? springVelocityScale\n          : SPRING_VELOCITY_SCALE\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  mounted = false;\n\n  static contextType = PagerContext;\n\n  // Mechanism to add child PanGestureHandler refs in the case that this\n  // Pager is a parent to child Pagers. Allows for coordination between handlers\n  private providerVal = {\n    addGestureHandlerRef: (ref: React.RefObject<PanGestureHandler>) => {\n      if (\n        !this.state.childPanGestureHandlerRefs.includes(ref) &&\n        this.mounted\n      ) {\n        this.setState((prevState: ComponentState) => ({\n          childPanGestureHandlerRefs: [\n            ...prevState.childPanGestureHandlerRefs,\n            ref,\n          ],\n        }));\n      }\n    },\n  };\n\n  // PanGestureHandler ref used for coordination with parent handlers\n  private gestureHandlerRef: React.RefObject<\n    PanGestureHandler\n  > = React.createRef();\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Tracks current state of gesture handler enabled\n  private gesturesEnabled = new Value(1);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact !== undefined\n      ? this.props.swipeVelocityImpact\n      : SWIPE_VELOCITY_IMPACT\n  );\n\n  private springVelocityScale = new Value(\n    this.props.springVelocityScale !== undefined\n      ? this.props.springVelocityScale\n      : SPRING_VELOCITY_SCALE\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach((listener) => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(\n                  this.initialVelocityForSpring,\n                  multiply(-1, this.velocityX, this.springVelocityScale)\n                )\n              : set(\n                  this.initialVelocityForSpring,\n                  multiply(this.velocityX, this.springVelocityScale)\n                )\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(not(clockRunning(this.clock)), startClock(this.clock)),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private toggleEnabled = () => {\n    if (this.state.enabled && this.mounted)\n      this.setState({ enabled: false }, () => {\n        this.setState({ enabled: true });\n      });\n  };\n\n  // Cancel gesture if swiping back from the initial tab or forward from the last tab.\n  // Enables parent Pager to pick up the gesture if one exists.\n  private maybeCancel = block([\n    cond(\n      and(\n        this.gesturesEnabled,\n        or(\n          and(\n            eq(this.index, sub(this.routesLength, 1)),\n            lessThan(this.gestureX, 0)\n          ),\n          and(eq(this.index, 0), greaterThan(this.gestureX, 0))\n        )\n      ),\n      set(this.gesturesEnabled, 0)\n    ),\n  ]);\n\n  private translateX = block([\n    onChange(\n      this.gesturesEnabled,\n      cond(\n        not(this.gesturesEnabled),\n        call([this.gesturesEnabled], this.toggleEnabled)\n      )\n    ),\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          if (this.mounted) {\n            this.forceUpdate();\n          }\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      [\n        cond(not(this.isSwiping), set(this.gesturesEnabled, 1)),\n        call(\n          [this.isSwiping, this.indexAtSwipeEnd, this.index],\n          ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n            const {\n              keyboardDismissMode,\n              onSwipeStart,\n              onSwipeEnd,\n            } = this.props;\n\n            if (isSwiping === TRUE) {\n              onSwipeStart?.();\n              this.interactionHandle = InteractionManager.createInteractionHandle();\n\n              if (keyboardDismissMode === 'auto') {\n                // @ts-ignore: the method is only available in newer React Native, but types aren't up-to-date\n                const input = TextInput.State.currentlyFocusedInput\n                  ? // @ts-ignore\n                    TextInput.State.currentlyFocusedInput()\n                  : TextInput.State.currentlyFocusedField();\n\n                // When a gesture begins, blur the currently focused input\n                TextInput.State.blurTextInput(input);\n\n                // Store the id of this input so we can refocus it if gesture was cancelled\n                this.previouslyFocusedTextInput = input;\n              } else if (keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n              }\n            } else {\n              onSwipeEnd?.();\n\n              if (this.interactionHandle !== null) {\n                InteractionManager.clearInteractionHandle(\n                  this.interactionHandle\n                );\n              }\n\n              if (keyboardDismissMode === 'auto') {\n                if (indexAtSwipeEnd === currentIndex) {\n                  // The index didn't change, we should restore the focus of text input\n                  const input = this.previouslyFocusedTextInput;\n\n                  if (input) {\n                    TextInput.State.focusTextInput(input);\n                  }\n                }\n\n                this.previouslyFocusedTextInput = null;\n              }\n            }\n          }\n        ),\n      ]\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        this.maybeCancel,\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <PanGestureHandler\n          ref={this.gestureHandlerRef}\n          simultaneousHandlers={this.state.childPanGestureHandlerRefs}\n          waitFor={this.state.childPanGestureHandlerRefs}\n          enabled={layout.width !== 0 && swipeEnabled && this.state.enabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            <PagerContext.Provider value={this.providerVal}>\n              {children}\n            </PagerContext.Provider>\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]}