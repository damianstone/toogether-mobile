{"version":3,"sources":["TouchableItem.tsx"],"names":["React","TouchableNativeFeedback","TouchableOpacity","Platform","View","LOLLIPOP","TouchableItem","Component","render","props","style","pressOpacity","pressColor","borderless","children","rest","OS","Version","Ripple","Children","only"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,uBADF,EAEEC,gBAFF,EAGEC,QAHF,EAIEC,IAJF,QAQO,cARP;AAqBA,MAAMC,QAAQ,GAAG,EAAjB;AAEA,eAAe,MAAMC,aAAN,SAA4BN,KAAK,CAACO,SAAlC,CAAmD;AAKhEC,EAAAA,MAAM,GAAG;AACP,wBAOI,KAAKC,KAPT;AAAA,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,YAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA;AALI,KAAN;AAAA,UAMKC,IANL;;AASA,QAAIZ,QAAQ,CAACa,EAAT,KAAgB,SAAhB,IAA6Bb,QAAQ,CAACc,OAAT,IAAoBZ,QAArD,EAA+D;AAC7D,0BACE,oBAAC,uBAAD,eACMU,IADN;AAEE,QAAA,UAAU,EAAEd,uBAAuB,CAACiB,MAAxB,CAA+BN,UAA/B,EAA2CC,UAA3C;AAFd,uBAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH;AAAb,SAAqBV,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAArB,CAJF,CADF;AAQD,KATD,MASO;AACL,0BACE,oBAAC,gBAAD,eAAsBC,IAAtB;AAA4B,QAAA,KAAK,EAAEL,KAAnC;AAA0C,QAAA,aAAa,EAAEC;AAAzD,UACGG,QADH,CADF;AAKD;AACF;;AA/B+D;;gBAA7CR,a,kBACG;AACpBM,EAAAA,UAAU,EAAE;AADQ,C","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n  StyleProp,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\ntype Props = ViewProps & {\n  onPress: () => void;\n  onLongPress?: () => void;\n  delayPressIn?: number;\n  borderless?: boolean;\n  pressColor: string;\n  pressOpacity?: number;\n  children?: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  render() {\n    const {\n      style,\n      pressOpacity,\n      pressColor,\n      borderless,\n      children,\n      ...rest\n    } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...rest} style={style} activeOpacity={pressOpacity}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]}