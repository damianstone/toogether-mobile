{"version":3,"sources":["TabView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","View","TabView","React","Component","layout","width","height","props","initialLayout","index","navigationState","onIndexChange","e","nativeEvent","state","setState","render","position","positionListener","onSwipeStart","onSwipeEnd","lazy","lazyPreloadDistance","removeClippedSubviews","keyboardDismissMode","swipeEnabled","swipeVelocityImpact","timingConfig","springConfig","tabBarPosition","renderTabBar","renderScene","renderLazyPlaceholder","sceneContainerStyle","style","gestureHandlerProps","springVelocityScale","renderPager","handleLayout","styles","pager","jumpToIndex","children","addListener","removeListener","jumpTo","sceneRendererProps","Animated","set","routes","map","route","i","key","loading","StyleSheet","create","flex","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AAIA;;AACA;;AACA;;AAQA;;;;;;;;;;;;;;;;AAgCA,MAAMA,qBAAqB,GAAGC,iDAAH,aAAGA,iDAAH,cAAGA,iDAAH,GAA6BC,iBAAxD;;AAEe,MAAMC,OAAN,SAAuCC,KAAK,CAACC,SAA7C,CAGb;AAAA;AAAA;;AAAA,mCAkBQ;AACNC,MAAAA,MAAM;AAAIC,QAAAA,KAAK,EAAE,CAAX;AAAcC,QAAAA,MAAM,EAAE;AAAtB,SAA4B,KAAKC,KAAL,CAAWC,aAAvC;AADA,KAlBR;;AAAA,yCAsBuBC,KAAD,IAAmB;AACvC,UAAIA,KAAK,KAAK,KAAKF,KAAL,CAAWG,eAAX,CAA2BD,KAAzC,EAAgD;AAC9C,aAAKF,KAAL,CAAWI,aAAX,CAAyBF,KAAzB;AACD;AACF,KA1BD;;AAAA,0CA4BwBG,CAAD,IAA0B;AAC/C,YAAM;AAAEN,QAAAA,MAAF;AAAUD,QAAAA;AAAV,UAAoBO,CAAC,CAACC,WAAF,CAAcT,MAAxC;;AAEA,UACE,KAAKU,KAAL,CAAWV,MAAX,CAAkBC,KAAlB,KAA4BA,KAA5B,IACA,KAAKS,KAAL,CAAWV,MAAX,CAAkBE,MAAlB,KAA6BA,MAF/B,EAGE;AACA;AACD;;AAED,WAAKS,QAAL,CAAc;AACZX,QAAAA,MAAM,EAAE;AACNE,UAAAA,MADM;AAEND,UAAAA;AAFM;AADI,OAAd;AAMD,KA5CD;AAAA;;AA8CAW,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QAAQ,EAAEC,gBADN;AAEJC,MAAAA,YAFI;AAGJC,MAAAA,UAHI;AAIJV,MAAAA,eAJI;AAKJW,MAAAA,IALI;AAMJC,MAAAA,mBANI;AAOJC,MAAAA,qBAPI;AAQJC,MAAAA,mBARI;AASJC,MAAAA,YATI;AAUJC,MAAAA,mBAVI;AAWJC,MAAAA,YAXI;AAYJC,MAAAA,YAZI;AAaJC,MAAAA,cAbI;AAcJC,MAAAA,YAdI;AAeJC,MAAAA,WAfI;AAgBJC,MAAAA,qBAhBI;AAiBJC,MAAAA,mBAjBI;AAkBJC,MAAAA,KAlBI;AAmBJC,MAAAA,mBAnBI;AAoBJC,MAAAA,mBApBI;AAqBJC,MAAAA;AArBI,QAsBF,KAAK9B,KAtBT;AAuBA,UAAM;AAAEH,MAAAA;AAAF,QAAa,KAAKU,KAAxB;AAEA,wBACE,oBAAC,qBAAD;AACE,MAAA,QAAQ,EAAE,KAAKwB,YADjB;AAEE,MAAA,KAAK,EAAE,CAACC,MAAM,CAACC,KAAR,EAAeN,KAAf;AAFT,OAIGG,WAAW,CAAC;AACX3B,MAAAA,eADW;AAEXN,MAAAA,MAFW;AAGXoB,MAAAA,mBAHW;AAIXC,MAAAA,YAJW;AAKXC,MAAAA,mBALW;AAMXC,MAAAA,YANW;AAOXC,MAAAA,YAPW;AAQXT,MAAAA,YARW;AASXC,MAAAA,UATW;AAUXT,MAAAA,aAAa,EAAE,KAAK8B,WAVT;AAWXL,MAAAA,mBAXW;AAYXb,MAAAA,qBAZW;AAaXY,MAAAA,mBAbW;AAcXO,MAAAA,QAAQ,EAAE,CAAC;AACTzB,QAAAA,QADS;AAETD,QAAAA,MAFS;AAGT2B,QAAAA,WAHS;AAITC,QAAAA,cAJS;AAKTC,QAAAA;AALS,OAAD,KAMJ;AACJ;AACA;AACA,cAAMC,kBAAkB,GAAG;AACzB7B,UAAAA,QADyB;AAEzBb,UAAAA,MAFyB;AAGzByC,UAAAA;AAHyB,SAA3B;AAMA,4BACE,oBAAC,KAAD,CAAO,QAAP,QACG3B,gBAAgB,gBACf,oBAAC,8BAAD,CAAU,IAAV;AACE,UAAA,IAAI,EAAE6B,+BAASC,GAAT,CAAa9B,gBAAb,EAA+BD,QAA/B;AADR,UADe,GAIb,IALN,EAMGY,cAAc,KAAK,KAAnB,IACCC,YAAY,iCACPgB,kBADO;AAEVpC,UAAAA;AAFU,WAPhB,EAWGM,MAAM,CACLN,eAAe,CAACuC,MAAhB,CAAuBC,GAAvB,CAA2B,CAACC,KAAD,EAAQC,CAAR,KAAc;AACvC,8BACE,oBAAC,kBAAD,eACMN,kBADN;AAEE,YAAA,WAAW,EAAEH,WAFf;AAGE,YAAA,cAAc,EAAEC,cAHlB;AAIE,YAAA,GAAG,EAAEO,KAAK,CAACE,GAJb;AAKE,YAAA,KAAK,EAAED,CALT;AAME,YAAA,IAAI,EACF,OAAO/B,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAAC;AAAE8B,cAAAA;AAAF,aAAD,CAAjC,GAA+C9B,IAPnD;AASE,YAAA,mBAAmB,EAAEC,mBATvB;AAUE,YAAA,eAAe,EAAEZ,eAVnB;AAWE,YAAA,KAAK,EAAEuB;AAXT,cAaG,CAAC;AAAEqB,YAAAA;AAAF,WAAD,KACCA,OAAO,GACHtB,qBAAqB,CAAC;AAAEmB,YAAAA;AAAF,WAAD,CADlB,GAEHpB,WAAW,iCACNe,kBADM;AAETK,YAAAA;AAFS,aAhBnB,CADF;AAwBD,SAzBD,CADK,CAXT,EAuCGtB,cAAc,KAAK,QAAnB,IACCC,YAAY,iCACPgB,kBADO;AAEVpC,UAAAA;AAFU,WAxChB,CADF;AA+CD;AA5EU,KAAD,CAJd,CADF;AAqFD;;AA7JD;;;;gBAHmBT,O,kBAIG;AACpB4B,EAAAA,cAAc,EAAE,KADI;AAEpBC,EAAAA,YAAY,EAAoBvB,KAAlB,iBACZ,oBAAC,eAAD,EAAYA,KAAZ,CAHkB;AAKpByB,EAAAA,qBAAqB,EAAE,MAAM,IALT;AAMpBR,EAAAA,mBAAmB,EAAE,MAND;AAOpBC,EAAAA,YAAY,EAAE,IAPM;AAQpBJ,EAAAA,IAAI,EAAE,KARc;AASpBC,EAAAA,mBAAmB,EAAE,CATD;AAUpBC,EAAAA,qBAAqB,EAAE,KAVH;AAWpBK,EAAAA,YAAY,EAAE,EAXM;AAYpBD,EAAAA,YAAY,EAAE,EAZM;AAapBQ,EAAAA,mBAAmB,EAAE,EAbD;AAcpBE,EAAAA,WAAW,EAAG9B,KAAD,iBAA4B,oBAAC,cAAD,EAAWA,KAAX;AAdrB,C;;AA+JxB,MAAMgC,MAAM,GAAGgB,wBAAWC,MAAX,CAAkB;AAC/BhB,EAAAA,KAAK,EAAE;AACLiB,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,QAAQ,EAAE;AAFL;AADwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <GestureHandlerWrapper\n        onLayout={this.handleLayout}\n        style={[styles.pager, style]}\n      >\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={\n                          typeof lazy === 'function' ? lazy({ route }) : lazy\n                        }\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}