{"version":3,"sources":["TabBarItem.tsx"],"names":["AnimatedInterpolate","Animated","interpolateNode","interpolate","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","React","Component","position","routes","tabIndex","length","inputRange","map","_","i","outputRange","render","route","navigationState","renderLabel","renderLabelPassed","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColor","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","props","indexOf","isFocused","index","activeOpacity","getActiveOpacity","inactiveOpacity","getInactiveOpacity","icon","label","activeIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","absoluteFill","undefined","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","flatten","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","selected","item","create","margin","backgroundColor","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\n// @ts-ignore\nconst AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport type Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return AnimatedInterpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    labelStyle,\n                    { color },\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]}