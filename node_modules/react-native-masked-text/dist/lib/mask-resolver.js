Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _masks=require('./masks');var Masks=_interopRequireWildcard(_masks);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var maskKeys=Object.keys(Masks);var MaskResolver=function(){function MaskResolver(){_classCallCheck(this,MaskResolver);}_createClass(MaskResolver,null,[{key:'resolve',value:function resolve(type){var maskKey=maskKeys.find(function(m){var handler=Masks[m];return handler&&handler.getType&&handler.getType()===type;});var handler=Masks[maskKey];if(!handler){throw new Error('Mask type not supported.');}return new handler();}}]);return MaskResolver;}();exports.default=MaskResolver;