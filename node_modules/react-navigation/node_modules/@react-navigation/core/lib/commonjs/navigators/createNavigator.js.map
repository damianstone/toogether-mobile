{"version":3,"sources":["createNavigator.js"],"names":["createNavigator","NavigatorView","router","navigationConfig","Navigator","React","Component","constructor","props","context","state","descriptors","screenProps","theme","themeContext","getDerivedStateFromProps","nextProps","currentState","prevDescriptors","navigation","routes","TypeError","reduce","route","key","getComponent","getComponentForRouteName","bind","routeName","childNavigation","getChildNavigation","options","getScreenOptions","componentDidUpdate","setState","render","target","type","data","emit","ThemeContext","navigationOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport invariant from '../utils/invariant';\nimport ThemeContext from '../views/ThemeContext';\nimport NavigationFocusEvents from '../views/NavigationFocusEvents';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    // eslint-disable-next-line react/sort-comp\n    static contextType = ThemeContext;\n    static router = router;\n    static navigationOptions = navigationConfig.navigationOptions;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.state = {\n        descriptors: {},\n        screenProps: this.props.screenProps,\n        theme: context,\n        themeContext: context,\n      };\n    }\n\n    static getDerivedStateFromProps(nextProps, currentState) {\n      const prevDescriptors = currentState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      invariant(\n        navigation != null,\n        'The navigation prop is missing for this navigator. In react-navigation v3 and v4 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html'\n      );\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = routes.reduce((descriptors, route) => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === currentState.screenProps &&\n          currentState.themeContext === currentState.theme\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return descriptors;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(\n          childNavigation,\n          screenProps,\n          currentState.themeContext\n        );\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n        return descriptors;\n      }, {});\n\n      return { descriptors, screenProps, theme: state.themeContext };\n    }\n\n    componentDidUpdate() {\n      if (this.context !== this.state.themeContext) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ themeContext: this.context });\n      }\n    }\n\n    render() {\n      return (\n        <React.Fragment>\n          <NavigationFocusEvents\n            navigation={this.props.navigation}\n            onEvent={(target, type, data) => {\n              this.state.descriptors[target]?.navigation.emit(type, data);\n            }}\n          />\n          <NavigatorView\n            {...this.props}\n            screenProps={this.state.screenProps}\n            navigation={this.props.navigation}\n            navigationConfig={navigationConfig}\n            descriptors={this.state.descriptors}\n          />\n        </React.Fragment>\n      );\n    }\n  }\n\n  return Navigator;\n}\n\nexport default createNavigator;\n"]}