{"version":3,"sources":["getSceneIndicesForInterpolationInputRange.js"],"names":["getSceneIndicesForInterpolationInputRange","props","scene","scenes","index","lastSceneIndexInScenes","length","isBack","isActive","currentSceneIndexInScenes","findIndex","item","targetSceneIndexInScenes","targetSceneIndex","lastSceneIndex","first","Math","min","last","max"],"mappings":";;;;;;;AAAA,SAASA,yCAAT,CAAmDC,KAAnD,EAA0D;AACxD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBF,KAA1B;AACA,QAAMG,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,QAAMC,sBAAsB,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAA/C;AACA,QAAMC,MAAM,GAAG,CAACJ,MAAM,CAACE,sBAAD,CAAN,CAA+BG,QAA/C;;AAEA,MAAID,MAAJ,EAAY;AACV,UAAME,yBAAyB,GAAGN,MAAM,CAACO,SAAP,CAC/BC,IAAD,IAAUA,IAAI,KAAKT,KADa,CAAlC;AAGA,UAAMU,wBAAwB,GAAGT,MAAM,CAACO,SAAP,CAAkBC,IAAD,IAAUA,IAAI,CAACH,QAAhC,CAAjC;AACA,UAAMK,gBAAgB,GAAGV,MAAM,CAACS,wBAAD,CAAN,CAAiCR,KAA1D;AACA,UAAMU,cAAc,GAAGX,MAAM,CAACE,sBAAD,CAAN,CAA+BD,KAAtD;;AAEA,QACEA,KAAK,KAAKS,gBAAV,IACAJ,yBAAyB,KAAKJ,sBAFhC,EAGE;AACA,aAAO;AACLU,QAAAA,KAAK,EAAEC,IAAI,CAACC,GAAL,CAASJ,gBAAT,EAA2BT,KAAK,GAAG,CAAnC,CADF;AAELc,QAAAA,IAAI,EAAEd,KAAK,GAAG;AAFT,OAAP;AAID,KARD,MAQO,IACLA,KAAK,KAAKS,gBAAV,IACAJ,yBAAyB,KAAKG,wBAFzB,EAGL;AACA,aAAO;AACLG,QAAAA,KAAK,EAAEX,KAAK,GAAG,CADV;AAELc,QAAAA,IAAI,EAAEF,IAAI,CAACG,GAAL,CAASL,cAAT,EAAyBV,KAAK,GAAG,CAAjC;AAFD,OAAP;AAID,KARM,MAQA,IACLA,KAAK,KAAKS,gBAAV,IACAJ,yBAAyB,GAAGG,wBAFvB,EAGL;AACA,aAAO,IAAP;AACD,KALM,MAKA;AACL,aAAO;AAAEG,QAAAA,KAAK,EAAEX,KAAK,GAAG,CAAjB;AAAoBc,QAAAA,IAAI,EAAEd,KAAK,GAAG;AAAlC,OAAP;AACD;AACF,GAhCD,MAgCO;AACL,WAAO;AAAEW,MAAAA,KAAK,EAAEX,KAAK,GAAG,CAAjB;AAAoBc,MAAAA,IAAI,EAAEd,KAAK,GAAG;AAAlC,KAAP;AACD;AACF;;eAEcJ,yC","sourcesContent":["function getSceneIndicesForInterpolationInputRange(props) {\n  const { scene, scenes } = props;\n  const index = scene.index;\n  const lastSceneIndexInScenes = scenes.length - 1;\n  const isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    const currentSceneIndexInScenes = scenes.findIndex(\n      (item) => item === scene\n    );\n    const targetSceneIndexInScenes = scenes.findIndex((item) => item.isActive);\n    const targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    const lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (\n      index !== targetSceneIndex &&\n      currentSceneIndexInScenes === lastSceneIndexInScenes\n    ) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1,\n      };\n    } else if (\n      index === targetSceneIndex &&\n      currentSceneIndexInScenes === targetSceneIndexInScenes\n    ) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1),\n      };\n    } else if (\n      index === targetSceneIndex ||\n      currentSceneIndexInScenes > targetSceneIndexInScenes\n    ) {\n      return null;\n    } else {\n      return { first: index - 1, last: index + 1 };\n    }\n  } else {\n    return { first: index - 1, last: index + 1 };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;\n"]}