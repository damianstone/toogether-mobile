{"version":3,"sources":["withNavigationFocus.js"],"names":["withNavigationFocus","Component","ComponentWithNavigationFocus","React","isFocused","props","navigation","componentDidMount","subscriptions","addListener","setState","componentWillUnmount","forEach","sub","remove","render","state","onRef","displayName","name","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEe,SAASA,mBAAT,CAA6BC,SAA7B,EAAwC;AACrD,QAAMC,4BAAN,SAA2CC,KAAK,CAACF,SAAjD,CAA2D;AAAA;AAAA;;AAAA,qCAKjD;AACNG,QAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,UAAX,CAAsBF,SAAtB;AADL,OALiD;AAAA;;AASzDG,IAAAA,iBAAiB,GAAG;AAClB,YAAM;AAAED,QAAAA;AAAF,UAAiB,KAAKD,KAA5B;AAEA,WAAKG,aAAL,GAAqB,CACnBF,UAAU,CAACG,WAAX,CAAuB,WAAvB,EAAoC,MAClC,KAAKC,QAAL,CAAc;AAAEN,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CADmB,EAInBE,UAAU,CAACG,WAAX,CAAuB,UAAvB,EAAmC,MACjC,KAAKC,QAAL,CAAc;AAAEN,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CAJmB,CAArB;AAQD;;AAEDO,IAAAA,oBAAoB,GAAG;AAAA;;AACrB,kCAAKH,aAAL,4EAAoBI,OAApB,CAA6BC,GAAD,IAASA,GAAG,CAACC,MAAJ,EAArC;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,0BACE,oBAAC,SAAD,eACM,KAAKV,KADX;AAEE,QAAA,SAAS,EAAE,KAAKW,KAAL,CAAWZ,SAFxB;AAGE,QAAA,GAAG,EAAE,KAAKC,KAAL,CAAWY;AAHlB,SADF;AAOD;;AAlCwD;;AADN,kBAC/Cf,4BAD+C,+CAGjDD,SAAS,CAACiB,WAAV,IAAyBjB,SAAS,CAACkB,IAHc;;AAsCrD,SAAO,mCACL,6BAAejB,4BAAf,EAA6C;AAAEkB,IAAAA,UAAU,EAAE;AAAd,GAA7C,CADK,EAELnB,SAFK,CAAP;AAID","sourcesContent":["import * as React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${\n      Component.displayName || Component.name\n    })`;\n\n    state = {\n      isFocused: this.props.navigation.isFocused(),\n    };\n\n    componentDidMount() {\n      const { navigation } = this.props;\n\n      this.subscriptions = [\n        navigation.addListener('willFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions?.forEach((sub) => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(\n    withNavigation(ComponentWithNavigationFocus, { forwardRef: false }),\n    Component\n  );\n}\n"]}