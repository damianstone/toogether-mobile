{"version":3,"sources":["getNavigationActionCreators.ts"],"names":["getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","NavigationActions","back","navigate","navigateTo","params","action","routeName","setParams"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAMA;AACA,MAAMA,2BAA2B,GAAIC,KAAD,IAAgB;AAClD,SAAO;AACLC,IAAAA,MAAM,EAAGC,GAAD,IAAyB;AAC/B,UAAIC,aAAa,GAAGD,GAApB;;AACA,UAAIA,GAAG,KAAKE,SAAR,IAAqBJ,KAAK,CAACE,GAA/B,EAAoC;AAClC,gCAAU,OAAOF,KAAK,CAACE,GAAb,KAAqB,QAA/B,EAAyC,wBAAzC;AACAC,QAAAA,aAAa,GAAGH,KAAK,CAACE,GAAtB;AACD;;AACD,aAAOG,iBAAiB,CAACC,IAAlB,CAAuB;AAAEJ,QAAAA,GAAG,EAAEC;AAAP,OAAvB,CAAP;AACD,KARI;AASLI,IAAAA,QAAQ,EAAE,CACRC,UADQ,EAERC,MAFQ,EAGRC,MAHQ,KAIL;AACH,UAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAOH,iBAAiB,CAACE,QAAlB,CAA2B;AAChCI,UAAAA,SAAS,EAAEH,UADqB;AAEhCC,UAAAA,MAFgC;AAGhCC,UAAAA;AAHgC,SAA3B,CAAP;AAKD;;AACD,8BACE,OAAOF,UAAP,KAAsB,QADxB,EAEE,uCAFF;AAIA,8BACEC,MAAM,IAAI,IADZ,EAEE,sEAFF;AAIA,8BACEC,MAAM,IAAI,IADZ,EAEE,4EAFF;AAIA,aAAOL,iBAAiB,CAACE,QAAlB,CAA2BC,UAA3B,CAAP;AACD,KAlCI;AAmCLI,IAAAA,SAAS,EAAGH,MAAD,IAA+B;AACxC,8BACET,KAAK,CAACE,GAAN,IAAa,OAAOF,KAAK,CAACE,GAAb,KAAqB,QADpC,EAEE,8CAFF;AAIA,aAAOG,iBAAiB,CAACO,SAAlB,CAA4B;AAAEH,QAAAA,MAAF;AAAUP,QAAAA,GAAG,EAAEF,KAAK,CAACE;AAArB,OAA5B,CAAP;AACD;AAzCI,GAAP;AA2CD,CA5CD;;eA8CeH,2B","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\ninterface NavigationParams {\n  [key: string]: any;\n}\n\n// TODO: Type `route`\nconst getNavigationActionCreators = (route: any) => {\n  return {\n    goBack: (key?: string | null) => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (\n      navigateTo: string | NavigationActions.NavigationNavigateActionPayload,\n      params?: NavigationParams,\n      action?: NavigationActions.NavigationNavigateAction\n    ) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: (params?: NavigationParams) => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]}