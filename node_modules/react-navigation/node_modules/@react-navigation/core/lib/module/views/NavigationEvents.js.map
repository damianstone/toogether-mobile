{"version":3,"sources":["NavigationEvents.js"],"names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","Component","eventName","props","componentDidMount","subscribeAll","componentDidUpdate","prevProps","navigation","removeAll","componentWillUnmount","subscriptions","forEach","addListener","args","propListener","getPropListener","remove","render"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,aADe;AAE1BC,EAAAA,QAAQ,EAAE,YAFgB;AAG1BC,EAAAA,QAAQ,EAAE,YAHgB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB;;AAEA,MAAMQ,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA+C;AAAA;AAAA;;AAAA,6CAmB1BC,SAAD,IAAe,KAAKC,KAAL,CAAWX,mBAAmB,CAACU,SAAD,CAA9B,CAnBY;AAAA;;AAC7CE,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA,SAAKC,YAAL;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKJ,KAAL,CAAWK,UAAX,KAA0BD,SAAS,CAACC,UAAxC,EAAoD;AAClD,WAAKC,SAAL;AACA,WAAKJ,YAAL;AACD;AACF;;AAEDK,EAAAA,oBAAoB,GAAG;AACrB,SAAKD,SAAL;AACD;;AAIDJ,EAAAA,YAAY,GAAG;AACb,SAAKM,aAAL,GAAqB,EAArB;AAEAd,IAAAA,UAAU,CAACe,OAAX,CAAoBV,SAAD,IAAe;AAChC,WAAKS,aAAL,CAAmBT,SAAnB,IAAgC,KAAKC,KAAL,CAAWK,UAAX,CAAsBK,WAAtB,CAC9BX,SAD8B,EAE9B,CAAC,GAAGY,IAAJ,KAAa;AACX,cAAMC,YAAY,GAAG,KAAKC,eAAL,CAAqBd,SAArB,CAArB;AACA,eAAOa,YAAY,IAAIA,YAAY,CAAC,GAAGD,IAAJ,CAAnC;AACD,OAL6B,CAAhC;AAOD,KARD;AASD;;AAEDL,EAAAA,SAAS,GAAG;AACVZ,IAAAA,UAAU,CAACe,OAAX,CAAoBV,SAAD,IAAe;AAChC,WAAKS,aAAL,CAAmBT,SAAnB,EAA8Be,MAA9B;AACD,KAFD;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA3C4C;;AA8C/C,eAAe3B,cAAc,CAACS,gBAAD,CAA7B","sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    this.subscribeAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.navigation !== prevProps.navigation) {\n      this.removeAll();\n      this.subscribeAll();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeAll();\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  subscribeAll() {\n    this.subscriptions = {};\n\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  removeAll() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]}