{"version":3,"sources":["createConfigGetter.js"],"names":["invariant","getScreenForRouteName","validateScreenOptions","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","theme","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,WAAO,EACL,GAAGC,iBADE;AAEL,SAAGD,UAAU,CAAC,EACZ,GAAGE,WADS;AAEZD,QAAAA;AAFY,OAAD;AAFR,KAAP;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAO,EACL,GAAGC,iBADE;AAEL,SAAGD;AAFE,KAAP;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,CAACE,YAAD,EAAeC,qBAAf,KAAyC,CACtDC,UADsD,EAEtDC,WAFsD,EAGtDC,KAHsD,KAInD;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAYH,UAAlB;AACA,QAAMI,KAAK,GAAGD,KAAd;AAEAZ,EAAAA,SAAS,CACPa,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAAT;AAKA,QAAMC,SAAS,GAAGd,qBAAqB,CAACM,YAAD,EAAeM,KAAK,CAACC,SAArB,CAAvC;AAEA,QAAME,WAAW,GAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMG,iBAAiB,GACrBD,WAAW,KAAKD,SAAhB,GAA4B,IAA5B,GAAmCC,WAAW,CAACX,iBADjD;AAEA,QAAMa,qBAAqB,GAAGH,SAAS,CAACV,iBAAxC;AAEA,QAAMc,aAAa,GAAG;AAAEV,IAAAA,UAAF;AAAcC,IAAAA,WAAW,EAAEA,WAAW,IAAI,EAA1C;AAA8CC,IAAAA;AAA9C,GAAtB;AAEA,MAAIS,YAAY,GAAGjB,WAAW,CAACK,qBAAD,EAAwB,EAAxB,EAA4BW,aAA5B,CAA9B;AACAC,EAAAA,YAAY,GAAGjB,WAAW,CACxBe,qBADwB,EAExBE,YAFwB,EAGxBD,aAHwB,CAA1B;AAKAC,EAAAA,YAAY,GAAGjB,WAAW,CAACc,iBAAD,EAAoBG,YAApB,EAAkCD,aAAlC,CAA1B;AAEAjB,EAAAA,qBAAqB,CAACkB,YAAD,EAAeP,KAAf,CAArB;AAEA,SAAOO,YAAP;AACD,CAlCD","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]}