{"version":3,"sources":["StackRouter.js"],"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","navigate","initialRouteKey","getParamsForRouteAndAction","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","length","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","childRoute","slice","reverse","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","prune","count","Math","max","concat","backRouteIndex","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"mappings":"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","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach((routeName) => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || generateKey(),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: (params) => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex((r) => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex((r) => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key !== state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map((newStackAction) => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate, prune } = action;\n\n        if (action.type === StackActions.POP && prune === false && key) {\n          const index = state.routes.findIndex((r) => r.key === key);\n\n          if (index > 0) {\n            const count = Math.max(index - (n ?? 1) + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            if (routes.length) {\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n                isTransitioning: immediate !== true,\n              };\n            }\n          }\n        } else {\n          let backRouteIndex = state.index;\n\n          if (action.type === StackActions.POP && n != null) {\n            // determine the index to go back *from*. In this case, n=1 means to go\n            // back from state.index, as if it were a normal \"BACK\" action\n            backRouteIndex = Math.max(1, state.index - n + 1);\n          } else if (key) {\n            const backRoute = state.routes.find((route) => route.key === key);\n            backRouteIndex = state.routes.indexOf(backRoute);\n          }\n\n          if (backRouteIndex > 0) {\n            return {\n              ...state,\n              routes: state.routes.slice(0, backRouteIndex),\n              index: backRouteIndex - 1,\n              isTransitioning: immediate !== true,\n            };\n          }\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"]}