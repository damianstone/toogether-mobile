{"version":3,"sources":["createAppContainer.js"],"names":["urlToPathAndParams","pathUtils","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","React","getDerivedStateFromProps","nextProps","constructor","Set","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","nav","err","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","_actionEventSubscribers","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_persistNavigationState","_initialAction","NavigationActions","init","_isStateful","BackHandler","addEventListener","subs","_isMounted","remove","back","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","componentDidMount","NODE_ENV","detached","Platform","OS","_linkingSub","Linking","_handleOpenURL","userProvidedStartupState","getStartupParams","startupState","urlAction","dispatchActions","loadedNavState","Promise","all","getInitialURL","componentDidCatch","e","componentWillUnmount","removeEventListener","render","_navigation","_getScreenProps","_getTheme"],"mappings":"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","sourcesContent":["/* eslint-disable react/sort-comp */\n\nimport * as React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport {\n  NavigationActions,\n  ThemeProvider,\n  pathUtils,\n  getNavigation,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn(\n      'You passed persistenceKey prop to a navigator. ' +\n        'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' +\n        'please see the navigation state persistence docs for more information. ' +\n        'Passing the persistenceKey prop is a no-op.'\n    );\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n  invariant(\n    (persistNavigationState === undefined &&\n      loadNavigationState === undefined) ||\n      (typeof persistNavigationState === 'function' &&\n        typeof loadNavigationState === 'function'),\n    'both persistNavigationState and loadNavigationState must either be undefined, or be functions'\n  );\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light',\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (\n        this._isStateful() &&\n        BackHandler &&\n        typeof BackHandler.addEventListener === 'function'\n      ) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.loadNavigationState\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production' && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      this._linkingSub = Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState,\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      // eslint-disable-next-line react/no-access-state-in-setstate\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log(\n              'Applying Navigation Action for Initial URL:',\n              parsedUrl\n            );\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([\n          Linking.getInitialURL(),\n          loadNavigationState && loadNavigationState(),\n        ]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState,\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async (nav) => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn(\n            'Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.'\n          );\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      if (this._linkingSub?.remove) {\n        this._linkingSub?.remove();\n      } else {\n        Linking.removeEventListener('url', this._handleOpenURL);\n      }\n\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = (action) => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach((subscriber) =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return (\n        <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n  }\n\n  return NavigationContainer;\n}\n"]}