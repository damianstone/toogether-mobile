{"version":3,"sources":["Scrollables.js"],"names":["WrappedScrollView","Platform","OS","ScrollView","GHScrollView","propsMaybeWithRefreshControl","props","onRefresh","refreshing","JSON","stringify","refreshControl","progressViewOffset","WrappedFlatList","React","forwardRef","ref","WrappedSectionList"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;AACA;;AACA;;;;;;;;;;AAEA,IAAIA,iBAAJ;;;AACA,IAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B;AACA;AACA;AACA,uBAAAF,iBAAiB,GAAG,8CAAgCG,uBAAhC,CAApB;AACD,CALD,MAKO;AACL,uBAAAH,iBAAiB,GAAG,8CAAgCI,qCAAhC,CAApB;AACD;;AAED,SAASC,4BAAT,CAAsCC,KAAtC,EAA6C;AAC3C,QAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;;AACA,MAAIA,SAAJ,EAAe;AACb,4BACE,OAAOD,KAAK,CAACE,UAAb,KAA4B,SAD9B,EAEE,sFACEC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CADF,GAEE,GAJJ;AAMA,WAAO,EACL,GAAGF,KADE;AAELK,MAAAA,cAAc,EACZL,KAAK,CAACK,cAAN,IAAwB,IAAxB,gBACE,oBAAC,2BAAD;AACE,QAAA,UAAU,EAAEL,KAAK,CAACE,UADpB;AAEE,QAAA,SAAS,EAAED,SAFb;AAGE,QAAA,kBAAkB,EAAED,KAAK,CAACM;AAH5B,QADF,GAOEN,KAAK,CAACK;AAVL,KAAP;AAaD,GApBD,MAoBO;AACL,WAAOL,KAAP;AACD;AACF;;AAED,MAAMO,eAAe,gBAAGC,KAAK,CAACC,UAAN,CAAiB,CAACT,KAAD,EAAQU,GAAR,kBACvC,oBAAC,qBAAD;AACE,EAAA,GAAG,EAAEA;AADP,GAEMV,KAFN;AAGE,EAAA,qBAAqB,EAAGA,KAAD,iBACrB,oBAAC,iBAAD,EAAuBD,4BAA4B,CAACC,KAAD,CAAnD;AAJJ,GADsB,CAAxB;;AAUA,MAAMW,kBAAkB,gBAAGH,KAAK,CAACC,UAAN,CAAiB,CAACT,KAAD,EAAQU,GAAR,kBAC1C,oBAAC,wBAAD;AACE,EAAA,GAAG,EAAEA;AADP,GAEMV,KAFN;AAGE,EAAA,qBAAqB,EAAGA,KAAD,iBACrB,oBAAC,iBAAD,EAAuBD,4BAA4B,CAACC,KAAD,CAAnD;AAJJ,GADyB,CAA3B","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]}