{"version":3,"sources":["createHandler.ts"],"names":["React","findNodeHandle","findNodeHandleRN","NativeModules","Platform","Touchable","deepEqual","RNGestureHandlerModule","State","node","OS","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","event","nativeEvent","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","updateEnqueued","setImmediate","update","componentDidUpdate","componentWillUnmount","dropGestureHandler","clearImmediate","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]}